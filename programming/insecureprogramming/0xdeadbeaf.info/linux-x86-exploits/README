$Id: README,v 1.5 2004/11/05 11:03:26 raptor Exp $

linux-x86-exploits.tgz - Linux/x86 exploitation techniques
Copyright (c) 2003-2004 Marco Ivaldi <raptor@0xdeadbeef.info>

Package contents:
.
./CREDITS			information about the authors
./README			this file

./chal
./chal/f334g443-ex.c		f334g443.c exploit #1 (bffffab0.info)
./chal/f334g443-ex2.c		f334g443.c exploit #2 (bffffab0.info)
./chal/f334g443-ex3.c		f334g443.c exploit #3 (bffffab0.info)
./chal/f334g443.c		f334g443.c vulnerable code

./fmt
./fmt/fmt1-ex.pl		fmt1.c exploit #1 (format string in Perl #1)
./fmt/fmt1-ex2.pl		fmt1.c exploit #2 (format string in Perl #2)
./fmt/fmt1-ex3.c		fmt1.c exploit #3 (format string in C #1)
./fmt/fmt1-ex4.c		fmt1.c exploit #4 (format string in C #2)
./fmt/fmt1-ex5.c		fmt1.c exploit #5 (direct parameter access)
./fmt/fmt1-ex6.c		fmt1.c exploit #6 (shellcode in user buffer #1)
./fmt/fmt1-ex7.c		fmt1.c exploit #7 (shellcode in user buffer #2)
./fmt/fmt1.c			fmt1.c vulnerable code
./fmt/fmt2-ex.c			fmt2.c exploit (format string with read() func)
./fmt/fmt2.c			fmt2.c vulnerable code
./fmt/fmt3-ex.c			fmt3.c exploit (format string in heap)
./fmt/fmt3.c			fmt3.c vulnerable code
./fmt/fmt4-ex.c			fmt4.c exploit (format string w/non-exec stack)
./fmt/fmt4.c			fmt4.c vulnerable code
./fmt/fmt5-ex.c			fmt5.c exploit (format string from file)
./fmt/fmt5.c			fmt5.c vulnerable code

./fp
./fp/fp1-ex.c			fp1.c exploit #1 (frame pointer overwrite)
./fp/fp1-ex2.c			fp1.c exploit #1 (frame pointer + aleph1)
./fp/fp1.c			fp1.c vulnerable code
./fp/fp2-ex.c			fp2.c exploit (frame pointer via strncat())
./fp/fp2.c			fp2.c vulnerable code
./fp/fp3-ex.c			fp3.c exploit (yet another fp overwrite)
./fp/fp3.c			fp3.c vulnerable code
./fp/fp4-ex.c			fp4.c exploit (off-by-one is sscanf())
./fp/fp4.c			fp4.c vulnerable code
./fp/fp5-ex.c			fp5.c exploit (fp overwite + 0-byte technique)
./fp/fp5.c			fp5.c vulnerable code

./fss
./fss/fss1-ex.c			fss1.c exploit (file stream technique)
./fss/fss1.c			fss1.c vulnerabile code

./funcptr
./funcptr/funcptr1-ex.c		funcptr1 exploit (function pointers)
./funcptr/funcptr1.c		funcptr1.c vulnerable code

./getenv
./getenv/getenv1-ex.c		getenv1.c exploit #1 (return to argv)
./getenv/getenv1-ex2.c		getenv1.c exploit #2 (aleph1 technique)
./getenv/getenv1-ex3.c		getenv1.c exploit #3 (aleph1 + putenv)
./getenv/getenv1-ex4.c		getenv1.c exploit #4 (return to envp)
./getenv/getenv1.c		getenv1.c vulnerable code

./gets
./gets/gets1-ex.c		gets1.c exploit (vulnerable gets() function)
./gets/gets1.c			gets1.c vulnerable code
./gets/gets2-ex.c		gets2.c exploit (vuln buf in .data section)
./gets/gets2.c			gets2.c vulnerable code
./gets/gets3-ex.c		gets3.c exploit #1 (vuln buf in heap)
./gets/gets3-ex2.c		gets3.c exploit #2 (vuln buf in heap + popen)
./gets/gets3-ex3.c		gets3.c exploit #3 (vuln buf in heap + envp)
./gets/gets3.c			gets3.c vulnerable code

./heap
./heap/heap1-ex.c		heap1.c exploit #1 (unlink() technique)
./heap/heap1-ex2.c		heap1.c exploit #2 (unlink() + openwall)
./heap/heap1-ex3.c		heap1.c exploit #3 (ptmalloc2 + openwall)
./heap/heap1.c			heap1.c vulnerable code
./heap/heap2-ex.c		heap2.c exploit (frontlink() + openwall)
./heap/heap2.c			heap2.c vulnerable code
./heap/heap3-ex.c		heap3.c exploit #1 (wilderness technique)
./heap/heap3-ex2.c		heap3.c exploit #2 (wilderness + openwall)
./heap/heap3.c			heap3.c vulnerable code
./heap/heap4-ex.c		heap4.c exploit #1 (wilderness off-by-two)
./heap/heap4-ex2.c		heap4.c exploit #2 (wilderness off-by-two + owl)
./heap/heap4.c			heap4.c vulnerable code
./heap/heap5-ex.c		heap5.c exploit #1 (wilderness + free)
./heap/heap5-ex2.c		heap5.c exploit #2 (wilderness + free + owl)
./heap/heap5.c			heap5.c vulnerable code
./heap/heap6-ex.c		heap6.c exploit #1 (heap-based off-by-one)
./heap/heap6-ex2.c		heap6.c exploit #2 (heap-based off-by-one + owl)
./heap/heap6.c			heap6.c vulnerable code
./heap/heap7-ex.c		heap7.c exploit #1 (heap-based off-by-one)
./heap/heap7-ex2.c		heap7.c exploit #2 (heap-based off-by-one + owl)
./heap/heap7.c			heap7.c vulnerable code
./heap/heap8-ex.c		heap8.c exploit (heap-to-stack off-by-one)
./heap/heap8.c			heap8.c vulnerable code
./heap/heap9-ex.c		heap9.c exploit (double-free() vuln)
./heap/heap9-ex2.c		heap9.c exploit (double-free() vuln + owl)
./heap/heap9.c			heap9.c vulnerable code
./heap/heap10-ex.c		heap10.c exploit (advanced malloc() exploit)
./heap/heap10.c			heap10.c vulnerable code

./int
./int/int1-ex.c			int1.c exploit (standard int array overflow)
./int/int1.c			int1.c vulnerable code
./int/int2-ex.c			int2.c exploit (int array overflow with checks)
./int/int2.c			int2.c vulnerable code
./int/int3-ex.c			int3.c exploit (int array overflow in the heap)
./int/int3.c			int3.c vulnerable code
./int/int4-ex.c			int4.c exploit (int array overflow + ret-libc)
./int/int4.c			int4.c vulnerable code
./int/int5-ex.c			int5.c exploit (another int array overflow)
./int/int5.c			int5.c vulnerable code
./int/int6-ex.c			int6.c exploit (short array overflow)
./int/int6.c			int6.c vulnerable code

./longjmp
./longjmp/longjmp1-ex.c		longjmp1.c exploit (longjmp buffers)
./longjmp/longjmp1.c		longjmp1.c vulnerable code

./nonterm
./nonterm/nonterm1-ex.c		nonterm1.c exploit (non-terminated string)
./nonterm/nonterm1.c		nonterm1.c vulnerable code

./owl
./owl/owl1-ex.c			owl1.c exploit #1 (return to .data technique)
./owl/owl1-ex2.c		owl1.c exploit #2 (.got entry substitution)
./owl/owl1.c			owl1.c vulnerable code
./owl/owl2-ex.c			owl2.c exploit (call of execle() in .plt)
./owl/owl2.c			owl2.c vulnerable code

./print/
./print/print1-ex.c		print1.c exploit #1 (printable shellcode)
./print/print1-ex2.c		print1.c exploit #2 (tiny shellcode cheat)
./print/print1.c		print1.c vulnerable code
./print/print2-ex.c		print2.c exploit #1 (printable shellcode)
./print/print2-ex2.c		print2.c exploit #2 (tiny shellcode cheat)
./print/print2.c		print2.c vulnerable code

./remote
./remote/remote1-ex.c		remote1.c exploit #1 (remote exploitation)
./remote/remote2-ex.c		remote1.c exploit #2 (brief version)
./remote/remote1.c		remote1.c vulnerable code
./remote/remote2-ex.c		remote2.c exploit #1 (remote format string)
./remote/remote2-ex2.c		remote2.c exploit #2 (short version)
./remote/remote2.c		remote2.c vulnerable code

./retlibc
./retlibc/retlibc1-ex.c		retlibc1.c exploit #1 (ret-into-libc w/system)
./retlibc/retlibc1-ex2.c	retlibc1.c exploit #2 (ret-into-libc w/execl)
./retlibc/retlibc1-ex3.c	retlibc1.c exploit #3 (ret-into-libc w/execl)
./retlibc/retlibc1-ex4.c	retlibc1.c exploit #4 (ret-into-libc + search#1)
./retlibc/retlibc1-ex5.c	retlibc1.c exploit #5 (ret-into-libc + search#2)
./retlibc/retlibc1-ex6.c	retlibc1.c exploit #6 (ret-into-libc + search#3)
./retlibc/retlibc1-ex7.c	retlibc1.c exploit #7 (chained ret-into-libc#1)
./retlibc/retlibc1-ex8.c	retlibc1.c exploit #8 (chained ret-into-libc#2)
./retlibc/retlibc1-ex9.c	retlibc1.c exploit #8 (chained ret-into-libc#3)
./retlibc/retlibc1-ex10.c	retlibc1.c exploit #8 (chained ret-into-libc#4)
./retlibc/retlibc1.c		retlibc1.c vulnerable code

./reusage
./reusage/reusage1-ex.c		reusage1.c exploit (re-use of "/bin/sh" string)
./reusage/reusage1.c		reusage1.c vulnerable code

./sg
./sg/sg1-ex.c			sg1.c exploit #1 (stackguard protection bypass)
./sg/sg1-ex2.c			sg1.c exploit #2 (stackshield protection bypass)
./sg/sg1.c			sg1.c vulnerable code
./sg/sg2-ex.c			sg2.c exploit (stackguard + non-exec stack)
./sg/sg2.c			sg2.c vulnerable code
./sg/sg3-ex.c			sg3.c exploit (stackguard + non-exec stack)
./sg/sg3.c			sg3.c vulnerable code
./sg/sg4-ex.c			sg4.c exploit (stackguard + non-exec stack)
./sg/sg4.c			sg4.c vulnerable code

./type
./type/type1-ex.c		type1.c exploit (type casting err in strncat())
./type/type1.c			type1.c vulnerable code
./type/type2-ex.c		type2.c exploit (non-term + type casting)
./type/type2.c			type2.c vulnerable code
