type token =
  | IDENT of (string * Cabs.cabsloc)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string * Cabs.cabsloc)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | EOF
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | INT32 of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | TRY of (Cabs.cabsloc)
  | EXCEPT of (Cabs.cabsloc)
  | FINALLY of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | ATTRIBUTE_USED of (Cabs.cabsloc)
  | BUILTIN_VA_LIST
  | BLOCKATTRIBUTE
  | DECLSPEC of (Cabs.cabsloc)
  | MSASM of (string * Cabs.cabsloc)
  | MSATTR of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA_EOL
  | AT_TRANSFORM of (Cabs.cabsloc)
  | AT_TRANSFORMEXPR of (Cabs.cabsloc)
  | AT_SPECIFIER of (Cabs.cabsloc)
  | AT_EXPR of (Cabs.cabsloc)
  | AT_NAME

open Parsing;;
# 44 "src/frontc/cparser.mly"
open Cabs
module E = Errormsg

let parse_error msg : unit =       (* sm: c++-mode highlight hack: -> ' <- *)
  E.parse_error msg

let print = print_string


let currentLoc () = 
  let l, f, c = E.getPosition () in
  { lineno   = l; filename = f; byteno   = c; }

let cabslu = {lineno = -10; filename = "cabs loc unknown"; byteno = -10;}

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> NOTHING
  | [expr] -> expr
  | _ -> COMMA (lst)


let currentFunctionName = ref "<outside any function>"
    
let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body. 
   * Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (* Go through all the parameter names and mark them as identifiers *)
  let rec findProto = function
      PROTO (d, args, _) when isJUSTBASE d -> 
        List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args

    | PROTO (d, _, _) -> findProto d
    | PARENTYPE (_, d, _) -> findProto d
    | PTR (_, d) -> findProto d
    | ARRAY (d, _, _) -> findProto d
    | _ -> parse_error "Cannot find the prototype in a function definition";
           raise Parsing.Parse_error 

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in
  findProto decl;
  currentFunctionName := n



let applyPointer (ptspecs: attribute list list) (dt: decl_type)  
       : decl_type = 
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration (loc: cabsloc) (specs: spec_elem list) (nl: init_name list) : definition = 
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      DECDEF ((specs, nl), loc)  
    end


let doFunctionDef (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list) 
                  (n: name) 
                  (b: block) : definition = 
  let fname = (specs, n) in
  FUNDEF (fname, b, loc, lend)


let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool)) 
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let checkConnective (s : string) : unit =
begin
  (* checking this means I could possibly have more connectives, with *)
  (* different meaning *)
  if (s <> "to") then (
    parse_error "transformer connective must be 'to'";
    raise Parsing.Parse_error
  )
  else ()
end

(* takes a not-nul-terminated list, and converts it to a string. *)
let rec intlist_to_string (str: int64 list):string =
  match str with
    [] -> ""  (* add nul-termination *)
  | value::rest ->
      let this_char = 
	if (compare value (Int64.of_int 255) > 0) 
           || (compare value Int64.zero < 0)
	then begin
	  let msg = Printf.sprintf "cparser:intlist_to_string: character 0x%Lx too big" value in
	  parse_error msg;
	  raise Parsing.Parse_error
	end 
	else 
	  String.make 1 (Char.chr (Int64.to_int value))
      in
      this_char ^ (intlist_to_string rest)

let fst3 (result, _, _) = result
let snd3 (_, result, _) = result
let trd3 (_, _, result) = result

# 263 "src/frontc/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  290 (* EQ *);
  291 (* PLUS_EQ *);
  292 (* MINUS_EQ *);
  293 (* STAR_EQ *);
  294 (* SLASH_EQ *);
  295 (* PERCENT_EQ *);
  296 (* AND_EQ *);
  297 (* PIPE_EQ *);
  298 (* CIRC_EQ *);
  299 (* INF_INF_EQ *);
  300 (* SUP_SUP_EQ *);
  301 (* ARROW *);
  302 (* DOT *);
  303 (* EQ_EQ *);
  304 (* EXCLAM_EQ *);
  305 (* INF *);
  306 (* SUP *);
  307 (* INF_EQ *);
  308 (* SUP_EQ *);
  312 (* SLASH *);
  313 (* PERCENT *);
  316 (* PIPE *);
  317 (* CIRC *);
  320 (* PIPE_PIPE *);
  321 (* INF_INF *);
  322 (* SUP_SUP *);
  325 (* RPAREN *);
  329 (* LBRACKET *);
  330 (* RBRACKET *);
  331 (* COLON *);
  333 (* COMMA *);
  334 (* ELLIPSIS *);
  335 (* QUEST *);
  350 (* ELSE *);
  357 (* LABEL__ *);
  360 (* BUILTIN_VA_LIST *);
  361 (* BLOCKATTRIBUTE *);
  367 (* PRAGMA_EOL *);
  372 (* AT_NAME *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* CST_CHAR *);
  259 (* CST_WCHAR *);
  260 (* CST_INT *);
  261 (* CST_FLOAT *);
  262 (* NAMED_TYPE *);
  263 (* CST_STRING *);
  264 (* CST_WSTRING *);
  265 (* CHAR *);
  266 (* INT *);
  267 (* DOUBLE *);
  268 (* FLOAT *);
  269 (* VOID *);
  270 (* INT64 *);
  271 (* INT32 *);
  272 (* ENUM *);
  273 (* STRUCT *);
  274 (* TYPEDEF *);
  275 (* UNION *);
  276 (* SIGNED *);
  277 (* UNSIGNED *);
  278 (* LONG *);
  279 (* SHORT *);
  280 (* VOLATILE *);
  281 (* EXTERN *);
  282 (* STATIC *);
  283 (* CONST *);
  284 (* RESTRICT *);
  285 (* AUTO *);
  286 (* REGISTER *);
  287 (* THREAD *);
  288 (* SIZEOF *);
  289 (* ALIGNOF *);
  309 (* PLUS *);
  310 (* MINUS *);
  311 (* STAR *);
  314 (* TILDE *);
  315 (* AND *);
  318 (* EXCLAM *);
  319 (* AND_AND *);
  323 (* PLUS_PLUS *);
  324 (* MINUS_MINUS *);
  326 (* LPAREN *);
  327 (* RBRACE *);
  328 (* LBRACE *);
  332 (* SEMICOLON *);
  336 (* BREAK *);
  337 (* CONTINUE *);
  338 (* GOTO *);
  339 (* RETURN *);
  340 (* SWITCH *);
  341 (* CASE *);
  342 (* DEFAULT *);
  343 (* WHILE *);
  344 (* DO *);
  345 (* FOR *);
  346 (* IF *);
  347 (* TRY *);
  348 (* EXCEPT *);
  349 (* FINALLY *);
  351 (* ATTRIBUTE *);
  352 (* INLINE *);
  353 (* ASM *);
  354 (* TYPEOF *);
  355 (* FUNCTION__ *);
  356 (* PRETTY_FUNCTION__ *);
  358 (* BUILTIN_VA_ARG *);
  359 (* ATTRIBUTE_USED *);
  362 (* DECLSPEC *);
  363 (* MSASM *);
  364 (* MSATTR *);
  365 (* PRAGMA *);
  366 (* PRAGMA_LINE *);
  368 (* AT_TRANSFORM *);
  369 (* AT_TRANSFORMEXPR *);
  370 (* AT_SPECIFIER *);
  371 (* AT_EXPR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\051\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\055\000\055\000\055\000\056\000\056\000\
\057\000\057\000\057\000\057\000\057\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\061\000\061\000\062\000\062\000\
\062\000\062\000\063\000\063\000\063\000\064\000\064\000\064\000\
\065\000\065\000\065\000\065\000\065\000\066\000\066\000\066\000\
\067\000\067\000\068\000\068\000\069\000\069\000\070\000\070\000\
\071\000\071\000\072\000\072\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\011\000\009\000\009\000\009\000\009\000\009\000\009\000\010\000\
\074\000\018\000\018\000\019\000\019\000\019\000\075\000\075\000\
\075\000\013\000\013\000\021\000\021\000\059\000\059\000\020\000\
\020\000\020\000\076\000\076\000\022\000\022\000\022\000\023\000\
\023\000\077\000\016\000\016\000\012\000\012\000\014\000\014\000\
\014\000\078\000\078\000\015\000\015\000\017\000\017\000\035\000\
\035\000\079\000\080\000\080\000\036\000\036\000\036\000\036\000\
\037\000\037\000\038\000\038\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\082\000\082\000\031\000\031\000\
\041\000\041\000\040\000\040\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\085\000\085\000\
\086\000\086\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\026\000\026\000\
\026\000\026\000\026\000\044\000\044\000\043\000\043\000\043\000\
\030\000\030\000\030\000\029\000\029\000\042\000\045\000\045\000\
\045\000\045\000\045\000\089\000\090\000\090\000\091\000\091\000\
\091\000\028\000\028\000\028\000\028\000\027\000\092\000\092\000\
\039\000\039\000\054\000\054\000\054\000\093\000\093\000\093\000\
\049\000\050\000\050\000\034\000\034\000\048\000\048\000\046\000\
\046\000\046\000\046\000\047\000\047\000\032\000\033\000\033\000\
\033\000\033\000\033\000\052\000\052\000\052\000\005\000\005\000\
\006\000\006\000\006\000\087\000\087\000\087\000\087\000\094\000\
\094\000\094\000\094\000\095\000\095\000\088\000\088\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\097\000\097\000\097\000\097\000\097\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\099\000\100\000\100\000\100\000\100\000\101\000\
\101\000\101\000\102\000\102\000\102\000\103\000\103\000\103\000\
\103\000\103\000\104\000\104\000\104\000\105\000\105\000\106\000\
\106\000\107\000\107\000\108\000\108\000\109\000\109\000\053\000\
\110\000\110\000\110\000\081\000\081\000\007\000\007\000\007\000\
\083\000\083\000\084\000\084\000\111\000\111\000\113\000\113\000\
\114\000\114\000\112\000\112\000\115\000\115\000\116\000\116\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\000\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\005\000\003\000\004\000\001\000\006\000\004\000\
\008\000\008\000\003\000\001\000\001\000\004\000\000\000\001\000\
\001\000\001\000\001\000\003\000\004\000\001\000\002\000\004\000\
\006\000\003\000\003\000\002\000\002\000\006\000\001\000\002\000\
\002\000\002\000\004\000\002\000\004\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\001\000\004\000\001\000\003\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\005\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\001\000\002\000\002\000\001\000\001\000\
\001\000\001\000\003\000\001\000\003\000\000\000\001\000\003\000\
\002\000\001\000\001\000\000\000\003\000\004\000\005\000\000\000\
\001\000\002\000\000\000\001\000\000\000\001\000\001\000\003\000\
\003\000\000\000\001\000\003\000\003\000\003\000\003\000\005\000\
\003\000\001\000\000\000\002\000\000\000\002\000\002\000\002\000\
\000\000\004\000\001\000\003\000\001\000\002\000\001\000\003\000\
\005\000\003\000\003\000\005\000\008\000\003\000\003\000\005\000\
\002\000\002\000\003\000\002\000\002\000\003\000\004\000\007\000\
\001\000\005\000\004\000\003\000\002\000\001\000\003\000\002\000\
\001\000\003\000\001\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\004\000\000\000\001\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\005\000\004\000\006\000\
\005\000\002\000\005\000\004\000\006\000\005\000\002\000\006\000\
\005\000\007\000\006\000\001\000\004\000\004\000\000\000\003\000\
\002\000\004\000\003\000\001\000\003\000\001\000\003\000\002\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\004\000\
\005\000\005\000\004\000\001\000\000\000\002\000\000\000\002\000\
\003\000\002\000\002\000\001\000\003\000\002\000\005\000\003\000\
\001\000\003\000\000\000\004\000\004\000\001\000\003\000\001\000\
\003\000\000\000\001\000\002\000\001\000\003\000\001\000\004\000\
\003\000\004\000\004\000\001\000\000\000\002\000\002\000\002\000\
\004\000\005\000\003\000\001\000\001\000\001\000\000\000\002\000\
\000\000\002\000\005\000\004\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\004\000\002\000\001\000\002\000\001\000\
\001\000\003\000\002\000\001\000\001\000\001\000\003\000\003\000\
\003\000\001\000\001\000\003\000\002\000\003\000\003\000\001\000\
\002\000\004\000\002\000\004\000\002\000\002\000\002\000\002\000\
\002\000\002\000\001\000\001\000\003\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\001\000\003\000\003\000\003\000\003\000\000\000\002\000\002\000\
\001\000\002\000\000\000\003\000\000\000\001\000\001\000\003\000\
\004\000\004\000\000\000\003\000\000\000\002\000\001\000\003\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\228\000\204\000\206\000\210\000\
\209\000\203\000\208\000\000\000\000\000\000\000\000\000\211\000\
\212\000\207\000\205\000\037\001\000\000\000\000\036\001\038\001\
\000\000\000\000\047\001\000\000\000\000\000\000\000\000\000\000\
\000\000\046\001\000\000\014\000\000\000\000\000\000\000\137\001\
\000\000\002\000\000\000\000\000\000\000\007\000\008\000\000\000\
\000\000\000\000\000\000\138\001\000\000\000\000\020\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\000\189\000\000\000\000\000\000\000\
\111\000\112\000\113\000\000\000\000\000\106\000\190\000\191\000\
\192\000\193\000\005\000\000\000\195\000\000\000\000\000\000\000\
\045\001\000\000\000\000\057\001\066\001\062\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\001\000\000\067\001\000\000\083\001\084\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\004\000\000\000\184\000\032\001\
\000\000\000\000\000\000\019\001\000\000\202\000\194\000\006\000\
\146\000\030\001\000\000\000\000\196\000\197\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\
\000\000\053\001\000\000\000\000\000\000\000\000\055\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\107\000\000\000\000\000\
\025\000\100\000\101\000\098\000\099\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\102\000\000\000\027\000\
\000\000\000\000\000\000\030\000\000\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\097\000\000\000\000\000\000\000\059\001\000\000\
\000\000\069\001\000\000\000\000\073\001\000\000\075\001\077\001\
\078\001\079\001\082\001\080\001\081\001\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\001\049\001\050\001\000\000\048\001\000\000\000\000\183\000\
\000\000\000\000\000\000\247\000\006\001\000\000\000\000\000\000\
\019\000\000\000\016\000\000\000\000\000\002\001\003\001\000\000\
\000\000\000\000\254\000\033\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\233\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\000\000\000\000\000\000\000\
\220\000\000\000\000\000\000\000\000\000\000\000\044\001\000\000\
\000\000\042\000\000\000\044\000\046\000\047\000\048\000\051\000\
\049\000\050\000\052\000\000\000\040\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\229\000\110\000\109\000\
\020\001\000\000\230\000\000\000\000\000\036\000\037\000\000\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\117\001\000\000\000\000\116\001\068\001\063\001\064\001\000\000\
\000\000\058\001\065\001\013\000\070\001\071\001\085\001\086\001\
\087\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\000\017\001\040\001\186\000\000\000\114\000\
\188\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\
\145\000\000\000\000\000\000\000\000\000\010\001\000\000\000\000\
\005\001\000\000\000\000\000\000\000\000\000\001\000\000\245\000\
\243\000\242\000\225\000\052\001\022\000\000\000\000\000\000\000\
\235\000\240\000\232\000\000\000\000\000\000\000\214\000\217\000\
\000\000\219\000\222\000\000\000\010\000\011\000\000\000\000\000\
\000\000\141\000\000\000\000\000\140\000\000\000\028\000\000\000\
\000\000\000\000\035\000\034\000\000\000\132\000\000\000\000\000\
\000\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\056\000\057\000\058\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\134\000\000\000\115\001\114\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\122\000\000\000\119\000\000\000\000\000\
\000\000\000\000\000\000\008\001\000\000\000\000\000\000\000\000\
\042\001\000\000\000\000\148\000\000\000\000\000\157\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\
\159\000\000\000\016\001\000\000\000\000\015\000\000\000\000\000\
\252\000\022\001\000\000\000\000\001\001\224\000\227\000\000\000\
\239\000\237\000\234\000\216\000\221\000\000\000\000\000\000\000\
\137\000\136\000\000\000\054\000\000\000\029\000\000\000\032\000\
\143\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\
\123\000\000\000\130\000\115\000\121\000\248\000\000\000\000\000\
\139\000\000\000\000\000\251\000\156\000\154\000\000\000\000\000\
\172\000\173\000\000\000\000\000\170\000\000\000\000\000\000\000\
\000\000\169\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\151\000\158\000\150\000\144\000\000\000\
\000\000\025\001\000\000\000\000\000\000\226\000\000\000\000\000\
\084\000\000\000\000\000\129\000\125\000\000\000\000\000\117\000\
\120\000\007\001\250\000\249\000\000\000\180\000\166\000\174\000\
\000\000\171\000\000\000\162\000\167\000\000\000\163\000\000\000\
\000\000\000\000\182\000\000\000\000\000\000\000\000\000\119\001\
\120\001\000\000\015\001\012\001\013\001\024\001\027\001\026\001\
\038\000\033\000\017\000\018\000\126\000\000\000\043\001\175\000\
\000\000\000\000\181\000\000\000\000\000\000\000\179\000\105\000\
\000\000\000\000\127\000\168\000\164\000\000\000\161\000\178\000\
\122\001\000\000\000\000\000\000\000\000\000\000\000\000\127\001\
\000\000\000\000\000\000\000\000\124\001\000\000\176\000\165\000\
\000\000\000\000\000\000\128\001\130\001\129\001\000\000\132\001\
\000\000\134\001\000\000\136\001"

let yydgoto = "\003\000\
\040\000\041\000\042\000\043\000\012\001\174\001\131\002\054\002\
\197\000\198\000\080\001\008\002\020\002\055\002\200\000\231\001\
\098\001\077\000\201\000\021\002\022\002\023\002\149\002\162\000\
\045\000\163\000\128\000\148\000\151\000\152\000\046\000\047\000\
\048\000\203\000\057\002\058\002\024\001\179\001\145\000\129\000\
\130\000\049\001\050\001\051\001\187\001\188\001\189\001\139\002\
\132\000\052\001\049\000\050\000\221\000\184\001\020\001\039\001\
\204\000\205\000\025\002\206\000\207\000\208\000\209\000\210\000\
\211\000\212\000\213\000\214\000\215\000\216\000\217\000\218\000\
\219\000\201\002\078\000\098\002\026\002\106\002\139\000\181\001\
\089\000\172\002\202\002\211\002\079\000\135\000\051\000\062\000\
\175\001\149\000\035\001\021\001\061\002\014\001\063\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\222\000\214\002\221\002\
\215\002\216\002\232\002\234\002"

let yysindex = "\013\001\
\178\010\178\010\000\000\080\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\255\214\255\249\012\089\000\000\000\
\000\000\000\000\000\000\000\000\174\011\249\012\000\000\000\000\
\249\012\249\012\000\000\178\010\122\255\249\012\152\255\177\255\
\189\255\000\000\195\008\000\000\244\254\025\255\213\255\000\000\
\078\001\000\000\178\010\254\254\016\013\000\000\000\000\038\255\
\063\000\249\012\249\012\000\000\087\000\081\012\000\000\000\000\
\098\000\047\000\189\255\104\000\068\000\173\255\098\255\033\008\
\085\000\067\000\249\012\000\000\000\000\033\008\096\000\180\000\
\000\000\000\000\000\000\108\012\016\255\000\000\000\000\000\000\
\000\000\000\000\000\000\189\255\000\000\016\255\182\007\051\013\
\000\000\136\255\084\000\000\000\000\000\000\000\122\009\140\009\
\195\008\195\008\195\008\195\008\195\008\195\008\195\008\101\000\
\000\000\022\255\000\000\106\000\000\000\000\000\168\000\158\000\
\155\000\093\000\229\000\123\000\124\000\129\000\131\000\132\000\
\215\010\211\009\197\000\000\000\000\000\209\001\000\000\000\000\
\137\000\125\000\172\000\000\000\240\000\000\000\000\000\000\000\
\000\000\000\000\126\000\154\000\000\000\000\000\157\000\160\000\
\176\000\081\012\203\000\184\000\199\000\236\000\000\000\217\000\
\189\255\000\000\017\001\098\000\098\000\231\000\000\000\239\000\
\033\008\036\255\248\000\033\008\033\008\233\000\250\000\033\008\
\033\008\252\000\178\010\254\254\000\000\000\000\004\001\008\001\
\000\000\000\000\000\000\000\000\000\000\000\000\026\010\044\010\
\211\009\211\009\211\009\211\009\211\009\211\009\085\001\115\010\
\115\010\000\005\012\001\021\001\000\000\000\000\030\001\000\000\
\063\255\203\000\044\001\000\000\140\001\000\000\183\007\193\000\
\227\000\234\000\197\001\005\001\035\001\065\001\072\001\073\001\
\216\255\000\000\000\000\144\255\106\001\083\001\000\000\144\002\
\186\001\000\000\190\001\000\005\000\000\000\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\001\196\001\092\001\
\000\000\101\255\101\255\195\008\195\008\195\008\195\008\195\008\
\195\008\195\008\195\008\195\008\195\008\195\008\195\008\195\008\
\195\008\195\008\195\008\195\008\195\008\121\001\134\001\137\001\
\000\000\000\000\000\000\203\000\000\000\209\001\203\000\000\000\
\162\008\209\001\126\005\000\000\000\000\138\001\213\001\110\001\
\000\000\087\000\000\000\249\012\149\001\000\000\000\000\000\000\
\000\001\201\011\000\000\000\000\211\009\075\001\148\001\152\001\
\157\001\217\000\217\000\098\000\033\008\000\000\211\009\033\008\
\154\001\150\001\162\001\240\000\000\000\159\001\163\001\033\008\
\000\000\168\001\170\001\033\008\173\001\172\000\000\000\174\001\
\000\005\000\000\000\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\005\000\000\000\000\180\255\175\001\
\182\001\185\001\189\001\211\009\003\002\000\000\000\000\000\000\
\000\000\194\001\000\000\101\255\101\255\000\000\000\000\143\006\
\162\006\000\000\211\009\211\009\211\009\211\009\211\009\211\009\
\211\009\211\009\211\009\211\009\211\009\211\009\211\009\211\009\
\211\009\211\009\211\009\211\009\211\009\211\009\211\009\211\009\
\211\009\211\009\211\009\211\009\211\009\211\009\211\009\143\006\
\000\000\125\013\125\013\000\000\000\000\000\000\000\000\223\001\
\224\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\168\000\168\000\158\000\158\000\155\000\155\000\155\000\
\155\000\093\000\093\000\229\000\123\000\124\000\129\000\131\000\
\038\002\039\002\000\000\000\000\000\000\000\000\025\001\000\000\
\000\000\203\000\087\000\209\001\228\001\000\000\081\012\087\001\
\000\000\226\001\230\001\189\255\140\004\000\000\051\255\233\001\
\000\000\204\001\131\005\054\002\241\001\000\000\184\000\000\000\
\000\000\000\000\000\000\000\000\000\000\245\001\247\001\217\000\
\000\000\000\000\000\000\211\009\105\255\033\008\000\000\000\000\
\248\001\000\000\000\000\251\001\000\000\000\000\254\001\255\001\
\002\002\000\000\143\006\143\006\000\000\234\008\000\000\253\001\
\010\002\204\001\000\000\000\000\006\002\000\000\011\002\251\255\
\012\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\193\000\193\000\227\000\227\000\234\000\234\000\234\000\234\000\
\197\001\197\001\005\001\035\001\065\001\072\001\073\001\013\002\
\000\000\016\002\000\000\000\000\017\002\017\002\022\002\025\002\
\000\000\101\255\211\009\000\000\027\002\000\000\071\002\032\002\
\001\002\162\008\042\002\000\000\043\002\233\006\016\255\044\002\
\000\000\213\001\126\000\000\000\006\002\066\002\000\000\041\002\
\067\002\103\255\040\006\072\002\211\009\079\002\072\002\187\005\
\076\002\072\002\038\255\178\255\000\000\140\004\080\002\140\004\
\000\000\084\002\000\000\070\002\081\002\000\000\090\002\203\000\
\000\000\000\000\081\012\143\006\000\000\000\000\000\000\092\002\
\000\000\000\000\000\000\000\000\000\000\017\002\017\002\017\002\
\000\000\000\000\025\001\000\000\249\012\000\000\203\000\000\000\
\000\000\000\000\211\009\178\010\211\009\027\255\024\000\025\001\
\000\000\162\008\000\000\000\000\000\000\000\000\249\012\079\000\
\000\000\087\002\098\002\000\000\000\000\000\000\005\000\187\005\
\000\000\000\000\093\002\143\006\000\000\094\002\252\006\187\005\
\094\000\000\000\187\005\097\002\086\002\116\005\187\005\253\000\
\178\255\178\255\104\002\000\000\000\000\000\000\000\000\051\255\
\143\012\000\000\106\002\111\002\107\002\000\000\112\002\127\002\
\000\000\130\002\137\002\000\000\000\000\027\255\211\009\000\000\
\000\000\000\000\000\000\000\000\209\001\000\000\000\000\000\000\
\133\002\000\000\180\255\000\000\000\000\211\009\000\000\187\005\
\072\002\134\002\000\000\143\006\117\002\072\002\038\255\000\000\
\000\000\205\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\148\002\000\000\000\000\
\143\002\150\002\000\000\157\002\187\005\038\255\000\000\000\000\
\205\002\164\002\000\000\000\000\000\000\143\006\000\000\000\000\
\000\000\016\255\178\002\179\002\181\002\183\002\188\002\000\000\
\190\002\187\005\067\007\016\255\000\000\016\255\000\000\000\000\
\201\002\204\002\199\002\000\000\000\000\000\000\205\002\000\000\
\198\002\000\000\205\002\000\000"

let yyrindex = "\000\000\
\012\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\162\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\255\162\000\000\000\000\000\
\162\000\162\000\000\000\016\000\000\000\162\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\063\001\031\000\000\000\000\000\000\000\
\000\000\162\000\162\000\000\000\231\011\207\002\000\000\000\000\
\000\000\000\000\000\000\000\000\147\001\000\000\201\000\210\002\
\000\002\000\000\162\000\000\000\000\000\210\002\109\002\000\000\
\000\000\000\000\000\000\000\000\068\011\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\210\007\119\014\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\150\014\000\000\000\000\253\014\095\015\
\112\013\057\008\208\002\020\006\184\005\244\001\215\255\043\001\
\035\003\000\000\000\000\000\000\000\000\149\000\000\000\000\000\
\216\002\000\000\055\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\003\000\000\000\000\000\000\230\002\062\255\
\000\000\000\000\174\000\231\002\000\000\084\255\000\000\013\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\210\002\063\001\000\000\210\002\210\002\000\000\000\000\210\002\
\210\002\000\000\057\255\063\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\192\013\023\000\000\000\000\000\241\013\000\000\099\007\016\016\
\208\016\149\012\138\013\219\002\006\008\246\012\019\003\250\003\
\160\002\000\000\000\000\000\000\232\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\186\000\000\000\187\002\063\001\000\000\
\000\000\048\000\114\255\000\000\000\000\000\000\000\000\164\003\
\000\000\000\000\000\000\045\255\000\000\000\000\000\000\202\000\
\012\003\000\000\000\000\000\000\000\000\015\003\000\000\000\000\
\000\000\013\003\013\003\000\000\210\002\000\000\000\000\210\002\
\029\001\011\003\000\000\000\000\000\000\000\000\000\000\210\002\
\000\000\000\000\000\000\210\002\000\000\032\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\003\122\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\003\000\000\000\000\000\000\000\000\000\000\022\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\015\064\015\118\015\149\015\172\015\195\015\218\015\
\241\015\025\009\203\010\231\004\025\007\108\006\089\002\102\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\003\000\000\
\000\000\063\001\231\011\059\006\000\000\000\000\207\002\225\001\
\000\000\024\003\000\000\000\000\033\003\000\000\063\001\064\255\
\000\000\042\000\062\001\002\000\000\000\000\000\231\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\003\
\000\000\000\000\000\000\000\000\063\001\210\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\016\175\016\241\016\018\017\051\017\084\017\117\017\150\017\
\175\017\200\017\014\005\242\011\220\017\135\003\110\004\000\000\
\000\000\000\000\000\000\000\000\186\014\217\014\000\000\000\000\
\063\016\000\000\000\000\000\000\034\003\000\000\050\009\000\000\
\000\000\000\000\000\000\000\000\000\000\038\003\000\000\000\000\
\000\000\000\000\048\003\000\000\013\000\109\016\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\003\000\000\033\003\000\000\033\003\
\000\000\000\000\000\000\032\003\000\000\000\000\000\000\181\255\
\000\000\000\000\207\002\038\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\014\083\014\000\000\
\000\000\000\000\028\003\000\000\000\000\000\000\100\000\000\000\
\000\000\000\000\000\000\057\255\000\000\090\008\000\000\028\003\
\000\000\000\000\000\000\000\000\000\000\000\000\066\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\109\016\000\000\041\003\000\000\000\000\
\039\003\039\003\000\000\000\000\000\000\000\000\000\000\063\001\
\045\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\008\000\000\000\000\
\000\000\000\000\000\000\000\000\015\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\003\024\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\221\255\045\003\000\000\000\000\000\000\052\003\000\000\000\000\
\000\000\225\255\000\000\000\000\000\000\053\003\237\255\000\000\
\000\000\000\000\000\000\225\255\000\000\000\000\000\000\000\000\
\000\000\000\000\054\003\000\000\000\000\000\000\000\000\000\000\
\056\003\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\124\004\231\255\006\004\072\255\220\002\249\255\232\253\
\000\000\235\255\171\255\159\253\249\254\185\255\045\254\000\000\
\000\000\000\000\000\000\000\000\000\000\214\253\007\002\018\000\
\000\000\217\255\000\000\131\255\103\003\141\255\186\255\000\000\
\000\000\075\255\209\255\247\254\114\002\108\002\241\254\000\000\
\136\003\227\255\000\000\203\002\025\004\000\000\000\000\167\255\
\113\255\229\255\128\255\000\000\049\000\106\254\021\000\240\254\
\000\000\000\000\170\254\114\001\011\000\016\001\027\001\171\001\
\024\001\036\003\037\003\075\003\076\003\074\003\000\000\069\002\
\072\008\141\254\233\255\000\000\000\000\135\002\000\000\000\000\
\222\255\000\000\234\001\000\000\202\003\000\000\135\255\254\000\
\003\000\109\254\014\003\000\000\085\002\246\254\000\000\000\000\
\000\000\000\000\070\000\158\001\187\001\105\002\188\001\206\003\
\213\003\205\003\212\003\215\003\000\000\081\001\004\002\000\000\
\000\000\008\002\000\000\246\001"

let yytablesize = 4907
let yytable = "\076\000\
\138\000\199\000\083\000\032\001\013\001\173\000\054\000\022\001\
\176\001\169\001\182\001\003\000\082\001\105\000\131\000\003\000\
\133\000\125\000\044\000\044\000\029\001\003\000\073\000\125\002\
\154\000\198\001\199\001\032\002\170\002\055\000\167\000\068\000\
\061\000\065\000\056\000\071\000\007\001\136\000\068\000\068\000\
\042\001\043\001\068\000\068\000\011\001\044\000\136\001\068\000\
\137\001\175\000\059\002\148\002\126\000\174\000\031\001\226\000\
\006\000\031\001\032\001\121\000\044\000\035\001\134\000\034\001\
\176\000\011\001\105\000\068\000\068\000\073\000\087\001\147\000\
\018\002\127\000\196\002\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\158\000\106\000\068\000\165\001\166\000\159\002\
\120\002\170\001\126\000\123\002\170\000\172\000\127\002\164\002\
\122\000\240\000\167\002\019\002\057\000\055\000\173\002\115\002\
\202\000\126\000\056\000\148\002\212\002\137\000\047\001\048\001\
\089\001\041\001\074\000\075\000\011\001\030\001\040\001\033\001\
\011\001\046\001\081\001\058\000\054\001\055\001\031\001\003\000\
\058\001\059\001\187\000\187\000\241\000\035\001\059\000\034\001\
\223\000\011\001\044\000\215\001\199\000\216\001\062\001\159\002\
\060\000\061\001\083\001\041\001\013\001\053\000\217\001\238\000\
\013\001\013\001\244\000\029\002\081\001\116\002\081\001\126\000\
\244\000\074\000\075\000\147\000\191\001\176\001\232\000\233\000\
\234\000\235\000\236\000\237\000\207\002\055\000\090\001\140\002\
\176\001\088\001\056\000\047\001\083\001\018\001\083\001\072\002\
\200\001\041\001\018\001\168\001\044\000\041\001\041\001\084\000\
\058\000\224\002\199\000\069\001\070\001\071\001\072\001\073\001\
\074\001\129\002\105\000\059\000\130\002\224\000\022\001\192\001\
\154\002\199\000\225\000\202\000\129\001\194\002\055\000\199\000\
\060\000\202\001\198\002\056\000\130\001\086\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\164\001\062\001\181\002\030\002\157\000\202\000\087\000\202\000\
\218\001\081\001\018\001\081\001\143\002\018\001\224\001\199\000\
\219\001\064\002\088\000\066\002\081\001\201\001\141\001\142\001\
\203\001\152\002\066\000\006\000\072\000\001\000\002\000\006\000\
\209\001\083\001\101\002\083\001\212\001\006\000\110\001\127\001\
\230\001\233\001\123\000\110\001\083\001\064\000\201\000\201\000\
\060\000\121\001\110\001\110\001\201\000\125\001\128\001\121\001\
\018\001\087\002\039\001\125\001\132\002\183\001\134\002\039\001\
\039\001\126\001\013\001\147\000\058\000\039\001\013\001\126\001\
\009\002\143\001\144\001\145\001\159\000\039\001\140\000\059\000\
\013\001\013\001\013\001\055\000\089\002\110\001\039\001\219\001\
\056\000\060\000\028\001\177\001\039\001\124\000\039\001\039\001\
\158\002\168\001\202\000\006\000\202\000\201\000\003\000\143\000\
\006\000\055\000\153\002\021\001\018\001\202\000\056\000\018\001\
\039\001\150\002\150\000\201\000\201\000\151\002\039\001\201\000\
\013\001\201\000\201\000\201\000\105\000\105\000\056\002\039\001\
\227\001\228\001\039\001\233\002\153\000\039\001\073\002\233\002\
\245\001\246\001\247\001\248\001\248\001\248\001\248\001\248\001\
\248\001\248\001\248\001\248\001\248\001\248\001\248\001\248\001\
\248\001\248\001\165\000\156\000\027\002\251\000\252\000\253\000\
\254\000\036\002\201\000\081\002\082\002\039\001\242\000\243\000\
\155\002\060\002\039\001\219\001\164\000\039\001\227\000\144\002\
\070\000\199\000\199\000\039\001\111\002\111\001\075\002\168\000\
\165\002\018\001\111\001\166\002\018\001\155\000\018\001\239\000\
\032\001\111\001\111\001\018\001\055\000\001\001\060\000\058\000\
\002\001\056\000\018\001\024\002\003\001\095\002\067\002\018\001\
\147\000\004\001\059\000\005\001\168\001\008\001\172\000\032\001\
\016\001\054\001\019\001\039\001\060\000\017\001\054\001\019\001\
\229\000\231\000\247\000\248\000\111\001\015\001\105\002\121\002\
\199\000\039\001\039\001\249\000\250\000\039\001\244\000\245\000\
\246\000\039\001\023\001\118\002\191\002\025\001\199\000\199\000\
\084\002\026\001\199\000\027\001\199\000\199\000\199\000\056\002\
\055\000\056\002\004\001\018\001\028\001\056\000\018\001\110\001\
\111\001\112\001\004\001\169\000\105\002\168\001\018\001\018\001\
\055\000\126\000\018\001\128\002\034\001\056\000\018\001\147\002\
\039\001\107\002\168\001\036\001\168\001\037\001\023\001\019\001\
\054\001\041\001\019\001\255\000\000\001\199\000\023\001\113\001\
\114\001\017\002\178\000\179\000\180\000\181\000\056\000\073\000\
\182\000\018\001\027\002\013\001\033\001\038\001\094\002\060\000\
\066\001\068\001\115\001\116\001\161\002\018\001\044\001\081\001\
\056\001\077\001\078\001\121\001\122\001\018\001\009\002\171\002\
\183\000\184\000\045\001\090\001\054\001\019\001\053\001\018\001\
\057\001\190\002\146\002\060\001\018\001\186\001\018\002\172\000\
\063\001\172\000\193\001\150\000\064\001\185\000\186\000\187\000\
\193\002\084\001\188\000\189\000\147\000\075\001\190\000\191\000\
\174\002\175\002\085\001\192\000\193\000\123\001\194\000\041\001\
\167\001\019\002\086\001\060\000\009\002\248\001\202\000\024\002\
\238\000\238\000\060\002\187\000\187\000\044\000\009\001\112\001\
\091\001\010\001\011\001\060\000\024\002\027\000\112\001\112\001\
\183\001\176\002\177\002\074\000\075\000\124\001\195\000\199\002\
\249\001\250\001\041\001\125\001\018\001\226\002\009\002\126\001\
\041\001\041\001\041\001\196\000\060\000\251\001\252\001\172\000\
\001\002\002\002\223\000\223\000\146\001\147\001\208\002\132\001\
\223\000\112\001\183\001\223\000\223\000\223\000\223\000\223\000\
\223\000\138\001\223\000\223\000\223\000\223\000\223\000\223\000\
\223\000\223\000\223\000\223\000\223\000\223\000\223\000\223\000\
\223\000\223\000\018\001\148\001\149\001\029\000\131\001\173\001\
\092\001\093\001\154\001\155\001\213\002\134\001\135\000\161\001\
\033\000\135\001\034\000\135\000\135\000\135\000\213\002\139\001\
\213\002\223\000\140\001\063\002\162\001\163\001\094\001\095\001\
\177\001\096\001\011\002\012\002\097\001\178\001\180\001\223\000\
\223\000\185\001\195\001\223\000\196\001\223\000\223\000\223\000\
\041\001\197\001\205\001\009\001\204\001\207\001\010\001\011\001\
\009\001\208\001\027\000\010\001\011\001\206\001\210\001\027\000\
\211\001\223\000\223\000\213\001\223\000\117\001\118\001\119\001\
\120\001\214\001\221\001\220\001\223\000\222\001\223\000\213\000\
\213\000\223\001\041\001\225\001\223\000\213\000\223\000\226\001\
\213\000\213\000\213\000\213\000\213\000\213\000\039\001\213\000\
\213\000\213\000\213\000\213\000\213\000\213\000\213\000\213\000\
\213\000\213\000\213\000\213\000\213\000\213\000\213\000\253\001\
\254\001\255\001\000\002\013\002\014\002\041\001\015\002\016\002\
\041\001\031\002\029\000\041\001\041\001\041\001\034\002\029\000\
\039\001\035\002\108\001\108\001\062\002\033\000\213\000\034\000\
\108\001\068\002\033\000\070\002\034\000\071\002\076\002\108\001\
\108\001\077\002\078\002\079\002\213\000\213\000\080\002\100\002\
\213\000\085\002\213\000\213\000\213\000\009\001\086\002\088\002\
\010\001\011\001\219\001\039\001\027\000\090\002\039\001\091\002\
\083\002\039\001\039\001\039\001\130\001\092\002\213\000\213\000\
\093\002\213\000\108\001\150\001\151\001\152\001\153\001\096\002\
\097\002\213\000\099\002\213\000\218\000\218\000\102\002\103\002\
\108\002\213\000\218\000\213\000\113\002\218\000\218\000\218\000\
\218\000\218\000\218\000\065\002\218\000\218\000\218\000\218\000\
\218\000\218\000\218\000\218\000\218\000\218\000\218\000\218\000\
\218\000\218\000\218\000\218\000\112\002\119\002\114\002\220\000\
\090\000\126\002\136\002\091\000\029\000\092\000\073\000\109\001\
\109\001\122\002\135\002\133\002\137\002\109\001\138\002\033\000\
\156\002\034\000\142\002\218\000\109\001\109\001\157\002\093\000\
\160\002\162\002\094\000\168\002\169\002\178\002\182\002\095\000\
\096\000\218\000\218\000\183\002\184\002\218\000\185\002\218\000\
\218\000\218\000\039\001\039\001\039\001\039\001\039\001\039\001\
\039\001\039\001\039\001\186\002\097\000\098\000\099\000\109\001\
\187\002\100\000\101\000\218\000\218\000\102\000\218\000\188\002\
\192\002\195\002\197\002\200\002\133\001\103\000\218\000\069\000\
\218\000\204\002\039\001\039\001\039\001\203\002\218\000\080\000\
\218\000\205\002\081\000\082\000\083\000\104\000\083\000\085\000\
\206\002\083\000\083\000\083\000\083\000\083\000\210\002\039\001\
\039\001\039\001\074\000\075\000\039\001\039\001\217\002\218\002\
\039\001\039\001\219\002\141\000\142\000\039\001\039\001\039\001\
\039\001\220\002\039\001\039\001\039\001\039\001\039\001\039\001\
\222\002\223\002\102\001\102\001\102\001\229\002\102\001\102\001\
\230\002\231\002\235\002\253\000\102\001\073\000\073\000\073\000\
\231\000\073\000\073\000\102\001\102\001\039\001\039\001\073\000\
\039\001\073\000\006\000\185\000\073\000\073\000\073\000\073\000\
\073\000\073\000\009\001\255\000\113\001\039\001\039\001\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\153\000\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\102\001\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\153\000\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\153\000\153\000\
\153\000\079\000\079\000\023\000\029\001\024\000\236\000\079\000\
\006\000\079\000\131\000\133\000\079\000\079\000\079\000\079\000\
\079\000\079\000\118\000\155\000\153\000\153\000\153\000\149\000\
\116\000\153\000\153\000\014\001\118\001\153\000\153\000\138\000\
\152\000\123\001\153\000\153\000\133\000\153\000\153\000\153\000\
\133\000\131\001\133\001\153\000\135\001\052\000\006\001\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\153\000\153\000\
\153\000\153\000\153\000\033\002\194\001\109\002\153\000\153\000\
\153\000\153\000\153\000\153\000\110\002\153\000\166\001\074\002\
\153\000\153\000\153\000\153\000\189\002\019\001\003\002\145\002\
\004\002\153\000\153\000\147\000\147\000\147\000\147\000\147\000\
\147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
\147\000\147\000\209\002\147\000\147\000\147\000\147\000\147\000\
\147\000\147\000\147\000\147\000\147\000\147\000\147\000\147\000\
\147\000\147\000\147\000\147\000\147\000\080\000\080\000\005\002\
\007\002\006\002\141\002\080\000\069\002\080\000\156\001\158\001\
\080\000\080\000\080\000\080\000\080\000\080\000\157\001\159\001\
\147\000\147\000\147\000\160\001\179\002\147\000\147\000\227\002\
\236\002\147\000\147\000\000\000\000\000\228\002\147\000\147\000\
\000\000\147\000\147\000\147\000\000\000\000\000\000\000\147\000\
\000\000\000\000\000\000\147\000\147\000\147\000\147\000\147\000\
\147\000\147\000\147\000\147\000\147\000\147\000\147\000\000\000\
\000\000\000\000\147\000\147\000\147\000\147\000\147\000\147\000\
\000\000\147\000\000\000\000\000\000\000\147\000\147\000\147\000\
\000\000\000\000\000\000\000\000\000\000\147\000\147\000\160\000\
\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\
\160\000\160\000\160\000\160\000\160\000\160\000\000\000\160\000\
\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\
\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\
\160\000\081\000\000\000\000\000\000\000\000\000\081\000\000\000\
\081\000\000\000\000\000\081\000\081\000\081\000\081\000\081\000\
\081\000\000\000\000\000\000\000\160\000\160\000\160\000\000\000\
\000\000\160\000\160\000\000\000\000\000\160\000\160\000\000\000\
\000\000\000\000\160\000\160\000\000\000\160\000\160\000\160\000\
\000\000\000\000\000\000\160\000\000\000\000\000\000\000\160\000\
\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\
\160\000\160\000\160\000\000\000\000\000\000\000\160\000\160\000\
\160\000\160\000\160\000\160\000\000\000\160\000\000\000\000\000\
\000\000\160\000\160\000\160\000\000\000\000\000\000\000\000\000\
\000\000\160\000\160\000\037\002\038\002\178\000\179\000\180\000\
\181\000\005\000\073\000\182\000\006\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\067\000\022\000\023\000\024\000\
\025\000\026\000\027\000\183\000\184\000\082\000\000\000\000\000\
\000\000\000\000\082\000\000\000\082\000\000\000\000\000\082\000\
\082\000\082\000\082\000\082\000\082\000\000\000\000\000\000\000\
\185\000\186\000\187\000\000\000\000\000\188\000\189\000\000\000\
\000\000\190\000\191\000\000\000\000\000\000\000\192\000\193\000\
\000\000\194\000\000\000\137\000\000\000\000\000\000\000\039\002\
\000\000\000\000\000\000\040\002\041\002\042\002\043\002\044\002\
\045\002\046\002\047\002\048\002\049\002\050\002\051\002\000\000\
\000\000\000\000\029\000\030\000\052\002\032\000\074\000\075\000\
\000\000\195\000\000\000\000\000\000\000\033\000\053\002\034\000\
\000\000\000\000\000\000\000\000\000\000\039\000\196\000\079\001\
\177\000\178\000\179\000\180\000\181\000\005\000\073\000\182\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\067\000\022\000\023\000\024\000\025\000\026\000\027\000\183\000\
\184\000\103\001\103\001\103\001\000\000\103\001\103\001\000\000\
\000\000\000\000\000\000\103\001\000\000\000\000\000\000\000\000\
\000\000\000\000\103\001\103\001\185\000\186\000\187\000\000\000\
\000\000\188\000\189\000\000\000\000\000\190\000\191\000\000\000\
\000\000\000\000\192\000\193\000\000\000\194\000\000\000\137\000\
\074\000\074\000\074\000\000\000\074\000\074\000\000\000\000\000\
\000\000\000\000\074\000\000\000\074\000\103\001\000\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\029\000\030\000\
\000\000\032\000\074\000\075\000\000\000\195\000\000\000\000\000\
\000\000\033\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\039\000\196\000\229\001\177\000\178\000\179\000\180\000\
\181\000\005\000\073\000\182\000\006\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\067\000\022\000\023\000\024\000\
\025\000\026\000\027\000\183\000\184\000\009\001\000\000\000\000\
\010\001\011\001\009\001\000\000\027\000\010\001\011\001\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\185\000\186\000\187\000\000\000\000\000\188\000\189\000\000\000\
\000\000\190\000\191\000\000\000\000\000\000\000\192\000\193\000\
\000\000\194\000\037\002\124\002\178\000\179\000\180\000\181\000\
\000\000\073\000\182\000\171\001\000\000\000\000\172\001\000\000\
\065\002\000\000\000\000\172\001\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\030\000\000\000\032\000\074\000\075\000\
\000\000\195\000\183\000\184\000\029\000\033\000\173\001\034\000\
\000\000\029\000\000\000\173\001\000\000\039\000\196\000\033\000\
\000\000\034\000\000\000\000\000\033\000\000\000\034\000\185\000\
\186\000\187\000\000\000\106\001\188\000\189\000\106\001\106\001\
\190\000\191\000\000\000\000\000\106\001\192\000\193\000\000\000\
\194\000\000\000\137\000\106\001\106\001\000\000\039\002\000\000\
\000\000\000\000\040\002\041\002\042\002\043\002\044\002\045\002\
\046\002\047\002\048\002\049\002\050\002\051\002\000\000\000\000\
\000\000\000\000\000\000\052\002\000\000\074\000\075\000\000\000\
\195\000\000\000\000\000\000\000\000\000\053\002\106\001\229\001\
\177\000\178\000\179\000\180\000\181\000\196\000\073\000\182\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\001\039\001\039\001\039\001\039\001\039\001\
\000\000\039\001\039\001\000\000\000\000\000\000\000\000\183\000\
\184\000\000\000\000\000\000\000\000\000\000\000\000\000\104\001\
\104\001\000\000\104\001\104\001\000\000\000\000\000\000\000\000\
\104\001\000\000\039\001\039\001\185\000\186\000\187\000\104\001\
\104\001\188\000\189\000\000\000\000\000\190\000\191\000\000\000\
\000\000\000\000\192\000\193\000\000\000\194\000\000\000\039\001\
\039\001\039\001\000\000\117\002\039\001\039\001\000\000\000\000\
\039\001\039\001\000\000\000\000\000\000\039\001\039\001\000\000\
\039\001\000\000\104\001\000\000\039\001\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\000\000\195\000\229\001\177\000\
\178\000\179\000\180\000\181\000\000\000\073\000\182\000\000\000\
\000\000\000\000\196\000\000\000\000\000\039\001\039\001\000\000\
\039\001\232\001\177\000\178\000\179\000\180\000\181\000\107\001\
\073\000\182\000\107\001\107\001\000\000\039\001\183\000\184\000\
\107\001\000\000\000\000\000\000\000\000\000\000\000\000\107\001\
\107\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\183\000\184\000\185\000\186\000\187\000\000\000\000\000\
\188\000\189\000\000\000\000\000\190\000\191\000\000\000\000\000\
\000\000\192\000\193\000\000\000\194\000\000\000\185\000\186\000\
\187\000\000\000\107\001\188\000\189\000\000\000\000\000\190\000\
\191\000\000\000\000\000\000\000\192\000\193\000\000\000\194\000\
\104\002\177\000\178\000\179\000\180\000\181\000\000\000\073\000\
\182\000\074\000\075\000\000\000\195\000\000\000\000\000\000\000\
\000\000\000\000\000\000\163\002\177\000\178\000\179\000\180\000\
\181\000\196\000\073\000\182\000\074\000\075\000\000\000\195\000\
\183\000\184\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\000\000\000\000\
\000\000\000\000\000\000\183\000\184\000\185\000\186\000\187\000\
\000\000\000\000\188\000\189\000\000\000\000\000\190\000\191\000\
\000\000\000\000\000\000\192\000\193\000\000\000\194\000\000\000\
\185\000\186\000\187\000\000\000\000\000\188\000\189\000\000\000\
\000\000\190\000\191\000\000\000\000\000\000\000\192\000\193\000\
\000\000\194\000\225\002\177\000\178\000\179\000\180\000\181\000\
\000\000\073\000\182\000\074\000\075\000\000\000\195\000\000\000\
\000\000\000\000\000\000\000\000\105\001\105\001\000\000\105\001\
\105\001\000\000\000\000\196\000\000\000\105\001\074\000\075\000\
\000\000\195\000\183\000\184\000\105\001\105\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\185\000\
\186\000\187\000\000\000\000\000\188\000\189\000\000\000\000\000\
\190\000\191\000\000\000\000\000\000\000\192\000\193\000\105\001\
\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\055\000\055\000\055\000\
\000\000\055\000\055\000\055\000\055\000\074\000\075\000\055\000\
\195\000\055\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\000\000\196\000\177\000\178\000\
\179\000\180\000\181\000\005\000\073\000\182\000\006\000\007\000\
\008\000\009\000\010\000\011\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\067\000\022\000\
\023\000\024\000\025\000\026\000\027\000\183\000\184\000\000\000\
\099\001\100\001\101\001\102\001\103\001\104\001\105\001\106\001\
\107\001\108\001\109\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\185\000\186\000\187\000\000\000\000\000\188\000\
\189\000\000\000\000\000\190\000\191\000\000\000\000\000\000\000\
\192\000\193\000\000\000\194\000\000\000\000\000\056\001\056\001\
\056\001\056\001\056\001\056\001\056\001\056\001\056\001\056\001\
\056\001\056\001\056\001\000\000\056\001\056\001\056\001\000\000\
\056\001\056\001\056\001\056\001\029\000\030\000\056\001\032\000\
\074\000\075\000\000\000\195\000\000\000\056\001\056\001\033\000\
\160\000\034\000\000\000\000\000\000\000\000\000\005\000\039\000\
\196\000\006\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\067\000\022\000\023\000\024\000\025\000\026\000\027\000\
\056\001\075\000\075\000\000\000\075\000\075\000\000\000\000\000\
\000\000\000\000\075\000\000\000\075\000\000\000\000\000\075\000\
\075\000\075\000\075\000\075\000\075\000\000\000\000\000\000\000\
\000\000\000\000\128\000\128\000\128\000\128\000\128\000\000\000\
\128\000\128\000\000\000\000\000\000\000\000\000\000\000\099\001\
\099\001\000\000\000\000\000\000\161\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\001\099\001\099\001\000\000\099\001\
\099\001\128\000\128\000\128\000\000\000\099\001\000\000\029\000\
\030\000\000\000\032\000\000\000\099\001\099\001\000\000\000\000\
\000\000\000\000\033\000\000\000\034\000\000\000\128\000\128\000\
\128\000\000\000\039\000\128\000\128\000\000\000\000\000\128\000\
\128\000\000\000\000\000\000\000\128\000\128\000\000\000\128\000\
\000\000\128\000\177\000\178\000\179\000\180\000\181\000\099\001\
\073\000\182\000\234\001\235\001\236\001\237\001\238\001\239\001\
\240\001\241\001\242\001\243\001\244\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\000\128\000\000\000\128\000\
\000\000\183\000\184\000\090\000\000\000\000\000\091\000\000\000\
\092\000\073\000\000\000\000\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\185\000\186\000\
\187\000\000\000\093\000\188\000\189\000\094\000\000\000\190\000\
\191\000\000\000\095\000\096\000\192\000\193\000\000\000\194\000\
\000\000\167\001\177\000\178\000\179\000\180\000\181\000\000\000\
\073\000\182\000\000\000\000\000\000\000\000\000\000\000\097\000\
\098\000\099\000\000\000\000\000\100\000\101\000\000\000\000\000\
\102\000\000\000\000\000\000\000\074\000\075\000\000\000\195\000\
\103\000\183\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\000\000\000\000\
\104\000\000\000\000\000\000\000\000\000\000\000\185\000\186\000\
\187\000\000\000\000\000\188\000\189\000\074\000\075\000\190\000\
\191\000\000\000\000\000\000\000\192\000\193\000\000\000\194\000\
\000\000\083\002\124\000\124\000\124\000\124\000\124\000\000\000\
\124\000\124\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\001\
\100\001\000\000\000\000\000\000\074\000\075\000\000\000\195\000\
\000\000\124\000\124\000\100\001\100\001\100\001\000\000\100\001\
\100\001\000\000\000\000\000\000\196\000\100\001\000\000\000\000\
\000\000\000\000\000\000\000\000\100\001\100\001\124\000\124\000\
\124\000\000\000\000\000\124\000\124\000\000\000\000\000\124\000\
\124\000\000\000\000\000\000\000\124\000\124\000\000\000\124\000\
\000\000\124\000\177\000\178\000\179\000\180\000\181\000\000\000\
\073\000\182\000\000\000\000\000\000\000\000\000\000\000\100\001\
\000\000\000\000\000\000\000\000\177\000\178\000\179\000\180\000\
\181\000\000\000\073\000\182\000\124\000\124\000\000\000\124\000\
\000\000\183\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\124\000\000\000\000\000\000\000\
\000\000\000\000\000\000\183\000\184\000\000\000\185\000\186\000\
\187\000\000\000\000\000\188\000\189\000\000\000\000\000\190\000\
\191\000\000\000\000\000\000\000\192\000\193\000\000\000\228\000\
\185\000\186\000\187\000\000\000\000\000\188\000\189\000\000\000\
\000\000\190\000\191\000\000\000\000\000\000\000\192\000\193\000\
\000\000\230\000\000\000\177\000\178\000\179\000\180\000\181\000\
\000\000\073\000\182\000\000\000\074\000\075\000\000\000\195\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\074\000\075\000\
\000\000\195\000\183\000\184\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\185\000\
\186\000\187\000\000\000\000\000\188\000\189\000\000\000\000\000\
\190\000\191\000\000\000\000\000\000\000\192\000\193\000\000\000\
\194\000\000\000\177\000\178\000\179\000\180\000\181\000\000\000\
\073\000\182\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\177\000\178\000\179\000\180\000\
\181\000\000\000\073\000\182\000\000\000\074\000\075\000\000\000\
\195\000\183\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\196\000\000\000\000\000\
\000\000\000\000\000\000\183\000\184\000\000\000\185\000\186\000\
\187\000\000\000\000\000\188\000\189\000\000\000\000\000\190\000\
\191\000\000\000\000\000\000\000\192\000\193\000\000\000\065\001\
\185\000\186\000\187\000\000\000\000\000\188\000\189\000\000\000\
\000\000\190\000\191\000\000\000\000\000\000\000\192\000\193\000\
\000\000\067\001\000\000\177\000\178\000\179\000\180\000\181\000\
\000\000\073\000\182\000\000\000\074\000\075\000\000\000\195\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\074\000\075\000\
\000\000\195\000\183\000\184\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\185\000\
\186\000\187\000\000\000\000\000\188\000\189\000\000\000\000\000\
\190\000\191\000\004\000\000\000\000\000\192\000\193\000\005\000\
\076\001\000\000\006\000\007\000\008\000\009\000\010\000\011\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\074\000\075\000\004\000\
\195\000\000\000\000\000\000\000\005\000\000\000\000\000\006\000\
\007\000\008\000\009\000\010\000\011\000\196\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\101\001\101\001\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\001\101\001\101\001\
\000\000\101\001\101\001\000\000\000\000\000\000\000\000\101\001\
\029\000\030\000\031\000\032\000\000\000\000\000\101\001\101\001\
\000\000\000\000\000\000\033\000\000\000\034\000\035\000\036\000\
\000\000\037\000\038\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\030\000\031\000\
\032\000\101\001\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\034\000\035\000\036\000\000\000\037\000\038\000\
\039\000\104\000\000\000\000\000\104\000\104\000\104\000\104\000\
\104\000\104\000\000\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\000\000\000\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\000\000\104\000\104\000\
\104\000\000\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\104\000\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\104\000\104\000\000\000\104\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\104\000\000\000\104\000\
\000\000\000\000\104\000\005\000\073\000\104\000\006\000\007\000\
\008\000\009\000\010\000\011\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\067\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\005\000\000\000\
\000\000\006\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\067\000\022\000\023\000\024\000\025\000\026\000\027\000\
\000\000\000\000\000\000\000\000\252\000\000\000\000\000\252\000\
\252\000\252\000\252\000\252\000\252\000\000\000\252\000\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\030\000\146\000\032\000\
\074\000\075\000\000\000\000\000\000\000\000\000\190\001\033\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\030\000\000\000\032\000\252\000\252\000\076\000\076\000\000\000\
\076\000\076\000\033\000\000\000\034\000\000\000\076\000\000\000\
\076\000\000\000\039\000\076\000\076\000\076\000\076\000\076\000\
\076\000\000\000\000\000\000\000\000\000\252\000\252\000\000\000\
\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\252\000\000\000\252\000\000\000\000\000\000\000\005\000\000\000\
\252\000\006\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\067\000\022\000\023\000\024\000\025\000\026\000\027\000\
\000\000\005\000\000\000\000\000\006\000\007\000\008\000\009\000\
\010\000\011\000\000\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\067\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\146\000\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\067\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\029\000\
\030\000\000\000\032\000\171\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\039\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\029\000\030\000\000\000\032\000\000\000\065\000\
\065\000\065\000\000\000\065\000\065\000\033\000\000\000\034\000\
\000\000\065\000\000\000\065\000\180\002\039\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\030\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\034\000\000\000\000\000\000\000\005\000\000\000\
\039\000\006\000\007\000\008\000\009\000\010\000\011\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\067\000\022\000\023\000\024\000\025\000\026\000\027\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\067\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\077\000\220\000\090\000\077\000\077\000\091\000\000\000\
\092\000\073\000\077\000\000\000\077\000\000\000\000\000\077\000\
\077\000\077\000\077\000\077\000\077\000\000\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\094\000\000\000\000\000\
\000\000\000\000\095\000\096\000\000\000\000\000\000\000\029\000\
\030\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\034\000\000\000\000\000\097\000\
\098\000\099\000\039\000\000\000\100\000\101\000\029\000\030\000\
\102\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\103\000\033\000\000\000\034\000\010\002\090\000\000\000\000\000\
\091\000\039\000\092\000\073\000\000\000\000\000\000\000\000\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\093\000\074\000\075\000\094\000\
\000\000\000\000\000\000\000\000\095\000\096\000\094\001\094\001\
\094\001\094\001\094\001\094\001\000\000\000\000\000\000\000\000\
\000\000\000\000\094\001\094\001\094\001\000\000\094\001\094\001\
\000\000\097\000\098\000\099\000\094\001\000\000\100\000\101\000\
\070\000\070\000\102\000\094\001\094\001\000\000\000\000\000\000\
\000\000\000\000\103\000\000\000\070\000\070\000\070\000\000\000\
\070\000\070\000\000\000\000\000\000\000\000\000\070\000\000\000\
\070\000\000\000\104\000\070\000\070\000\070\000\070\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\094\001\074\000\
\075\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
\103\000\000\000\103\000\103\000\103\000\000\000\103\000\103\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\000\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\000\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\039\000\039\000\039\000\103\000\039\000\
\039\000\039\000\039\000\000\000\000\000\039\000\000\000\039\000\
\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\000\000\043\000\043\000\043\000\039\000\
\043\000\043\000\043\000\043\000\000\000\000\000\043\000\000\000\
\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\045\000\045\000\045\000\
\043\000\045\000\045\000\045\000\045\000\000\000\000\000\045\000\
\000\000\045\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\060\001\060\001\060\001\060\001\060\001\
\060\001\060\001\060\001\060\001\060\001\060\001\060\001\060\001\
\000\000\060\001\060\001\060\001\000\000\060\001\060\001\060\001\
\060\001\000\000\000\000\060\001\000\000\000\000\000\000\000\000\
\000\000\045\000\060\001\060\001\072\001\072\001\072\001\072\001\
\072\001\072\001\072\001\072\001\072\001\072\001\072\001\000\000\
\072\001\072\001\072\001\000\000\072\001\072\001\072\001\072\001\
\000\000\000\000\072\001\000\000\000\000\000\000\000\000\000\000\
\000\000\072\001\072\001\000\000\000\000\060\001\000\000\000\000\
\074\001\074\001\074\001\074\001\074\001\074\001\074\001\074\001\
\074\001\074\001\074\001\000\000\074\001\074\001\074\001\000\000\
\074\001\074\001\074\001\074\001\000\000\000\000\074\001\000\000\
\000\000\000\000\000\000\000\000\072\001\074\001\074\001\076\001\
\076\001\076\001\076\001\076\001\076\001\076\001\076\001\076\001\
\076\001\076\001\000\000\076\001\076\001\076\001\000\000\076\001\
\076\001\076\001\076\001\000\000\000\000\076\001\000\000\000\000\
\000\000\000\000\000\000\000\000\076\001\076\001\000\000\000\000\
\074\001\000\000\000\000\088\001\088\001\088\001\088\001\088\001\
\088\001\088\001\088\001\000\000\000\000\000\000\000\000\088\001\
\088\001\088\001\000\000\088\001\088\001\088\001\088\001\000\000\
\000\000\088\001\000\000\000\000\000\000\000\000\000\000\076\001\
\088\001\088\001\089\001\089\001\089\001\089\001\089\001\089\001\
\089\001\089\001\000\000\000\000\000\000\000\000\089\001\089\001\
\089\001\000\000\089\001\089\001\089\001\089\001\000\000\000\000\
\089\001\000\000\000\000\000\000\000\000\000\000\000\000\089\001\
\089\001\000\000\000\000\088\001\000\000\000\000\090\001\090\001\
\090\001\090\001\090\001\090\001\090\001\090\001\000\000\000\000\
\000\000\000\000\090\001\090\001\090\001\000\000\090\001\090\001\
\090\001\090\001\000\000\000\000\090\001\000\000\000\000\000\000\
\000\000\000\000\089\001\090\001\090\001\091\001\091\001\091\001\
\091\001\091\001\091\001\000\000\000\000\000\000\000\000\000\000\
\000\000\091\001\091\001\091\001\000\000\091\001\091\001\091\001\
\091\001\000\000\000\000\091\001\092\001\092\001\092\001\092\001\
\092\001\092\001\091\001\091\001\000\000\000\000\090\001\000\000\
\092\001\092\001\092\001\000\000\092\001\092\001\092\001\092\001\
\000\000\000\000\092\001\000\000\000\000\000\000\000\000\000\000\
\000\000\092\001\092\001\093\001\093\001\093\001\093\001\093\001\
\093\001\000\000\000\000\000\000\000\000\091\001\000\000\093\001\
\093\001\093\001\000\000\093\001\093\001\093\001\093\001\000\000\
\000\000\093\001\095\001\095\001\095\001\095\001\095\001\095\001\
\093\001\093\001\000\000\000\000\092\001\000\000\095\001\095\001\
\095\001\000\000\095\001\095\001\000\000\000\000\000\000\000\000\
\095\001\096\001\096\001\096\001\096\001\096\001\096\001\095\001\
\095\001\000\000\000\000\000\000\000\000\096\001\096\001\096\001\
\000\000\096\001\096\001\093\001\000\000\000\000\000\000\096\001\
\097\001\097\001\097\001\097\001\097\001\097\001\096\001\096\001\
\000\000\000\000\000\000\000\000\097\001\097\001\097\001\000\000\
\097\001\097\001\095\001\000\000\000\000\000\000\097\001\098\001\
\098\001\098\001\098\001\098\001\098\001\097\001\097\001\000\000\
\000\000\000\000\000\000\098\001\098\001\098\001\000\000\098\001\
\098\001\096\001\000\000\000\000\000\000\098\001\000\000\000\000\
\000\000\000\000\000\000\000\000\098\001\098\001\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
\097\001\000\000\059\000\059\000\059\000\000\000\059\000\059\000\
\059\000\059\000\000\000\000\000\059\000\000\000\059\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\059\000\098\001\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\000\000\025\000\025\000\025\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\000\000\025\000\025\000\000\000\025\000\
\000\000\020\000\000\000\025\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\025\000\
\025\000\025\000\000\000\025\000\025\000\025\000\025\000\025\000\
\025\000\000\000\025\000\000\000\000\000\025\000\000\000\000\000\
\025\000\025\000\000\000\025\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\000\000\060\000\060\000\060\000\060\000\
\000\000\000\000\060\000\000\000\060\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\000\000\061\000\061\000\061\000\
\061\000\000\000\000\000\061\000\000\000\061\000\000\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\062\000\062\000\
\062\000\062\000\062\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\062\000\062\000\000\000\062\000\062\000\
\062\000\062\000\000\000\000\000\062\000\000\000\062\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\063\000\
\063\000\063\000\063\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\063\000\063\000\000\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\000\000\063\000\
\000\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\064\000\064\000\064\000\064\000\064\000\064\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\064\000\064\000\000\000\
\064\000\064\000\064\000\064\000\000\000\000\000\064\000\000\000\
\064\000\000\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\066\000\066\000\
\000\000\066\000\066\000\000\000\000\000\000\000\000\000\066\000\
\000\000\066\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\067\000\067\000\067\000\067\000\067\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
\067\000\000\000\067\000\067\000\000\000\000\000\000\000\000\000\
\067\000\000\000\067\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\068\000\068\000\068\000\068\000\068\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\068\000\068\000\000\000\068\000\068\000\000\000\000\000\000\000\
\000\000\068\000\000\000\068\000\000\000\000\000\068\000\068\000\
\068\000\068\000\068\000\068\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\069\000\069\000\000\000\069\000\069\000\000\000\000\000\
\000\000\000\000\069\000\000\000\069\000\071\000\071\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
\000\000\071\000\071\000\071\000\000\000\071\000\071\000\000\000\
\000\000\000\000\000\000\071\000\000\000\071\000\072\000\072\000\
\071\000\071\000\071\000\071\000\071\000\071\000\000\000\000\000\
\000\000\000\000\072\000\072\000\072\000\000\000\072\000\072\000\
\000\000\000\000\000\000\000\000\072\000\000\000\072\000\000\000\
\000\000\072\000\072\000\072\000\072\000\072\000\072\000\078\000\
\000\000\000\000\078\000\078\000\000\000\000\000\000\000\000\000\
\078\000\000\000\078\000\000\000\000\000\078\000\078\000\078\000\
\078\000\078\000\078\000"

let yycheck = "\021\000\
\048\000\087\000\028\000\147\000\126\000\076\000\004\000\136\000\
\019\001\017\001\026\001\000\000\194\000\035\000\044\000\000\000\
\044\000\043\000\001\000\002\000\146\000\000\000\007\001\048\002\
\059\000\042\001\043\001\175\001\126\002\001\001\070\000\014\000\
\012\000\013\000\006\001\015\000\122\000\000\001\021\000\022\000\
\156\000\157\000\025\000\026\000\000\001\028\000\228\000\030\000\
\230\000\084\000\000\001\094\002\055\001\077\000\000\001\090\000\
\000\001\147\000\202\000\072\001\043\000\000\001\045\000\000\001\
\086\000\000\001\088\000\050\000\051\000\007\001\008\001\054\000\
\046\001\076\001\172\002\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\062\000\035\000\067\000\014\001\066\000\112\002\
\044\002\018\001\055\001\047\002\072\000\076\000\050\002\120\002\
\072\001\076\001\123\002\073\001\072\001\001\001\127\002\001\001\
\087\000\055\001\006\001\150\002\206\002\072\001\075\001\076\001\
\202\000\000\001\099\001\100\001\072\001\147\000\153\000\147\000\
\076\001\161\000\194\000\095\001\164\000\165\000\072\001\071\001\
\168\000\169\000\076\001\077\001\111\001\072\001\106\001\072\001\
\001\001\072\001\121\000\065\001\001\001\067\001\172\000\168\002\
\116\001\171\000\194\000\034\001\014\001\070\001\076\001\103\000\
\018\001\019\001\071\001\171\001\228\000\055\001\230\000\055\001\
\077\001\099\001\100\001\146\000\034\001\176\001\097\000\098\000\
\099\000\100\000\101\000\102\000\197\002\001\001\202\000\067\002\
\187\001\201\000\006\001\075\001\228\000\001\001\230\000\200\001\
\044\001\072\001\006\001\017\001\171\000\076\001\077\001\070\001\
\095\001\218\002\055\001\185\000\186\000\187\000\188\000\189\000\
\190\000\024\001\224\000\106\001\027\001\070\001\079\001\037\001\
\103\002\070\001\075\001\194\000\069\001\169\002\001\001\076\001\
\116\001\047\001\174\002\006\001\077\001\070\001\244\000\245\000\
\246\000\247\000\248\000\249\000\250\000\251\000\252\000\253\000\
\254\000\255\000\000\001\001\001\002\001\003\001\004\001\005\001\
\012\001\015\001\137\002\172\001\072\001\228\000\070\001\230\000\
\069\001\065\001\070\001\067\001\083\002\073\001\084\001\116\001\
\077\001\186\001\070\001\188\001\076\001\045\001\242\000\243\000\
\048\001\096\002\013\000\000\001\015\000\001\000\002\000\000\001\
\056\001\065\001\026\002\067\001\060\001\000\001\064\001\064\001\
\096\001\097\001\070\001\069\001\076\001\072\001\000\001\001\001\
\116\001\069\001\076\001\077\001\006\001\069\001\079\001\075\001\
\116\001\226\001\001\001\075\001\054\002\028\001\056\002\006\001\
\001\001\069\001\172\001\034\001\095\001\006\001\176\001\075\001\
\128\001\244\000\245\000\246\000\063\000\055\001\000\001\106\001\
\186\001\187\001\188\001\001\001\074\001\111\001\069\001\077\001\
\006\001\116\001\073\001\071\001\070\001\000\000\077\001\073\001\
\076\001\167\001\065\001\071\001\067\001\055\001\071\001\001\001\
\076\001\001\001\098\002\069\001\070\001\076\001\006\001\073\001\
\055\001\074\001\001\001\069\001\070\001\078\001\055\001\073\001\
\226\001\075\001\076\001\077\001\130\001\131\001\181\001\070\001\
\092\001\093\001\073\001\231\002\070\001\070\001\204\001\235\002\
\110\001\111\001\112\001\113\001\114\001\115\001\116\001\117\001\
\118\001\119\001\120\001\121\001\122\001\123\001\124\001\125\001\
\126\001\127\001\072\001\072\001\170\001\049\001\050\001\051\001\
\052\001\180\001\116\001\219\001\220\001\001\001\045\001\046\001\
\074\001\183\001\006\001\077\001\072\001\116\001\075\001\085\002\
\072\001\000\001\001\001\116\001\037\002\064\001\206\001\072\001\
\075\001\070\001\069\001\078\001\073\001\070\001\001\001\075\001\
\064\002\076\001\077\001\006\001\001\001\059\001\116\001\095\001\
\061\001\006\001\001\001\167\001\060\001\019\002\188\001\006\001\
\175\001\063\001\106\001\064\001\026\002\001\001\181\001\087\002\
\076\001\001\001\001\001\055\001\116\001\034\001\006\001\006\001\
\095\000\096\000\053\001\054\001\111\001\077\001\030\002\045\002\
\055\001\069\001\070\001\065\001\066\001\073\001\055\001\056\001\
\057\001\077\001\101\001\043\002\157\002\076\001\069\001\070\001\
\222\001\077\001\073\001\076\001\075\001\076\001\077\001\054\002\
\001\001\056\002\069\001\070\001\069\001\006\001\073\001\055\001\
\056\001\057\001\077\001\072\001\068\002\083\002\069\001\070\001\
\001\001\055\001\073\001\051\002\077\001\006\001\077\001\093\002\
\116\001\031\002\096\002\069\001\098\002\034\001\069\001\070\001\
\072\001\001\001\073\001\047\001\048\001\116\001\077\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\116\001\064\002\157\002\064\002\077\001\018\002\116\001\
\183\000\184\000\065\001\066\001\116\002\116\001\072\001\119\002\
\072\001\192\000\193\000\047\001\048\001\070\001\126\002\126\002\
\032\001\033\001\076\001\087\002\116\001\116\001\071\001\001\001\
\071\001\151\002\092\002\072\001\006\001\070\001\046\001\054\002\
\069\001\056\002\000\001\001\001\069\001\053\001\054\001\055\001\
\166\002\070\001\058\001\059\001\067\002\001\001\062\001\063\001\
\092\001\093\001\070\001\067\001\068\001\059\001\070\001\034\001\
\072\001\073\001\069\001\116\001\172\002\091\002\085\002\083\002\
\076\001\077\001\136\002\076\001\077\001\092\002\024\001\069\001\
\069\001\027\001\028\001\116\001\096\002\031\001\076\001\077\001\
\103\002\129\002\130\002\099\001\100\001\061\001\102\001\175\002\
\113\001\114\001\069\001\060\001\070\001\219\002\206\002\063\001\
\075\001\076\001\077\001\115\001\116\001\115\001\116\001\126\002\
\121\001\122\001\000\001\001\001\247\000\248\000\198\002\069\001\
\006\001\111\001\137\002\009\001\010\001\011\001\012\001\013\001\
\014\001\069\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\116\001\249\000\250\000\095\001\077\001\097\001\
\045\001\046\001\255\000\000\001\210\002\004\001\069\001\071\001\
\106\001\004\001\108\001\074\001\075\001\076\001\220\002\004\001\
\222\002\055\001\111\001\000\001\071\001\069\001\067\001\068\001\
\071\001\070\001\130\001\131\001\073\001\001\001\105\001\069\001\
\070\001\069\001\071\001\073\001\069\001\075\001\076\001\077\001\
\000\001\069\001\077\001\024\001\075\001\071\001\027\001\028\001\
\024\001\071\001\031\001\027\001\028\001\076\001\071\001\031\001\
\071\001\095\001\096\001\071\001\098\001\049\001\050\001\051\001\
\052\001\076\001\069\001\077\001\106\001\069\001\108\001\000\001\
\001\001\069\001\034\001\001\001\114\001\006\001\116\001\070\001\
\009\001\010\001\011\001\012\001\013\001\014\001\000\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\117\001\
\118\001\119\001\120\001\069\001\069\001\069\001\001\001\001\001\
\072\001\070\001\095\001\075\001\076\001\077\001\077\001\095\001\
\034\001\076\001\063\001\064\001\076\001\106\001\055\001\108\001\
\069\001\073\001\106\001\071\001\108\001\071\001\071\001\076\001\
\077\001\071\001\069\001\069\001\069\001\070\001\069\001\071\001\
\073\001\077\001\075\001\076\001\077\001\024\001\069\001\069\001\
\027\001\028\001\077\001\069\001\031\001\074\001\072\001\075\001\
\072\001\075\001\076\001\077\001\077\001\072\001\095\001\096\001\
\072\001\098\001\111\001\251\000\252\000\253\000\254\000\077\001\
\034\001\106\001\075\001\108\001\000\001\001\001\069\001\069\001\
\069\001\114\001\006\001\116\001\076\001\009\001\010\001\011\001\
\012\001\013\001\014\001\070\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\075\001\070\001\076\001\000\001\
\001\001\070\001\077\001\004\001\095\001\006\001\007\001\063\001\
\064\001\075\001\071\001\076\001\076\001\069\001\069\001\106\001\
\074\001\108\001\071\001\055\001\076\001\077\001\069\001\024\001\
\076\001\076\001\027\001\075\001\087\001\070\001\069\001\032\001\
\033\001\069\001\070\001\069\001\074\001\073\001\071\001\075\001\
\076\001\077\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\069\001\053\001\054\001\055\001\111\001\
\071\001\058\001\059\001\095\001\096\001\062\001\098\001\071\001\
\076\001\076\001\094\001\007\001\069\001\070\001\106\001\014\000\
\108\001\075\001\032\001\033\001\034\001\074\001\114\001\022\000\
\116\001\076\001\025\000\026\000\069\001\086\001\071\001\030\000\
\076\001\074\001\075\001\076\001\077\001\078\001\075\001\053\001\
\054\001\055\001\099\001\100\001\058\001\059\001\069\001\069\001\
\062\001\063\001\070\001\050\000\051\000\067\001\068\001\069\001\
\070\001\075\001\072\001\073\001\074\001\075\001\076\001\077\001\
\077\001\076\001\059\001\060\001\061\001\069\001\063\001\064\001\
\069\001\075\001\077\001\069\001\069\001\059\001\060\001\061\001\
\071\001\063\001\064\001\076\001\077\001\099\001\100\001\069\001\
\102\001\071\001\000\001\076\001\074\001\075\001\076\001\077\001\
\078\001\079\001\069\001\069\001\069\001\115\001\116\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\111\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\063\001\064\001\071\001\073\001\071\001\076\001\069\001\
\071\001\071\001\069\001\075\001\074\001\075\001\076\001\077\001\
\078\001\079\001\071\001\076\001\053\001\054\001\055\001\071\001\
\071\001\058\001\059\001\076\001\070\001\062\001\063\001\074\001\
\071\001\069\001\067\001\068\001\076\001\070\001\071\001\072\001\
\069\001\069\001\069\001\076\001\069\001\002\000\121\000\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\176\001\038\001\034\002\095\001\096\001\
\097\001\098\001\099\001\100\001\035\002\102\001\015\001\205\001\
\105\001\106\001\107\001\108\001\150\002\133\000\123\001\091\002\
\124\001\114\001\115\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\201\002\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\063\001\064\001\125\001\
\127\001\126\001\068\002\069\001\191\001\071\001\001\001\003\001\
\074\001\075\001\076\001\077\001\078\001\079\001\002\001\004\001\
\053\001\054\001\055\001\005\001\136\002\058\001\059\001\220\002\
\235\002\062\001\063\001\255\255\255\255\222\002\067\001\068\001\
\255\255\070\001\071\001\072\001\255\255\255\255\255\255\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\087\001\088\001\089\001\090\001\091\001\255\255\
\255\255\255\255\095\001\096\001\097\001\098\001\099\001\100\001\
\255\255\102\001\255\255\255\255\255\255\106\001\107\001\108\001\
\255\255\255\255\255\255\255\255\255\255\114\001\115\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\071\001\072\001\
\255\255\255\255\255\255\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\255\255\255\255\255\255\095\001\096\001\
\097\001\098\001\099\001\100\001\255\255\102\001\255\255\255\255\
\255\255\106\001\107\001\108\001\255\255\255\255\255\255\255\255\
\255\255\114\001\115\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\072\001\255\255\255\255\255\255\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\087\001\088\001\089\001\090\001\091\001\255\255\
\255\255\255\255\095\001\096\001\097\001\098\001\099\001\100\001\
\255\255\102\001\255\255\255\255\255\255\106\001\107\001\108\001\
\255\255\255\255\255\255\255\255\255\255\114\001\115\001\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\255\255\255\255\076\001\077\001\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\072\001\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\111\001\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\095\001\096\001\
\255\255\098\001\099\001\100\001\255\255\102\001\255\255\255\255\
\255\255\106\001\255\255\108\001\255\255\255\255\255\255\255\255\
\255\255\114\001\115\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\024\001\255\255\255\255\
\027\001\028\001\024\001\255\255\031\001\027\001\028\001\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\070\001\255\255\255\255\073\001\255\255\
\070\001\255\255\255\255\073\001\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\099\001\100\001\
\255\255\102\001\032\001\033\001\095\001\106\001\097\001\108\001\
\255\255\095\001\255\255\097\001\255\255\114\001\115\001\106\001\
\255\255\108\001\255\255\255\255\106\001\255\255\108\001\053\001\
\054\001\055\001\255\255\060\001\058\001\059\001\063\001\064\001\
\062\001\063\001\255\255\255\255\069\001\067\001\068\001\255\255\
\070\001\255\255\072\001\076\001\077\001\255\255\076\001\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\255\255\255\255\
\255\255\255\255\255\255\097\001\255\255\099\001\100\001\255\255\
\102\001\255\255\255\255\255\255\255\255\107\001\111\001\000\001\
\001\001\002\001\003\001\004\001\005\001\115\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\255\255\032\001\033\001\053\001\054\001\055\001\076\001\
\077\001\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\053\001\
\054\001\055\001\255\255\076\001\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\255\255\111\001\255\255\074\001\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\115\001\255\255\255\255\099\001\100\001\255\255\
\102\001\000\001\001\001\002\001\003\001\004\001\005\001\060\001\
\007\001\008\001\063\001\064\001\255\255\115\001\032\001\033\001\
\069\001\255\255\255\255\255\255\255\255\255\255\255\255\076\001\
\077\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\032\001\033\001\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\053\001\054\001\
\055\001\255\255\111\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\000\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\255\255\255\255\255\255\000\001\001\001\002\001\003\001\004\001\
\005\001\115\001\007\001\008\001\099\001\100\001\255\255\102\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\115\001\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\033\001\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\099\001\100\001\255\255\102\001\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\115\001\255\255\069\001\099\001\100\001\
\255\255\102\001\032\001\033\001\076\001\077\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\111\001\
\070\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\099\001\100\001\069\001\
\102\001\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\255\255\255\255\115\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\255\255\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\095\001\096\001\069\001\098\001\
\099\001\100\001\255\255\102\001\255\255\076\001\077\001\106\001\
\000\001\108\001\255\255\255\255\255\255\255\255\006\001\114\001\
\115\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\111\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\255\255\076\001\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\032\001\033\001\034\001\255\255\069\001\255\255\095\001\
\096\001\255\255\098\001\255\255\076\001\077\001\255\255\255\255\
\255\255\255\255\106\001\255\255\108\001\255\255\053\001\054\001\
\055\001\255\255\114\001\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\072\001\001\001\002\001\003\001\004\001\005\001\111\001\
\007\001\008\001\099\001\100\001\101\001\102\001\103\001\104\001\
\105\001\106\001\107\001\108\001\109\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\099\001\100\001\255\255\102\001\
\255\255\032\001\033\001\001\001\255\255\255\255\004\001\255\255\
\006\001\007\001\255\255\255\255\115\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\024\001\058\001\059\001\027\001\255\255\062\001\
\063\001\255\255\032\001\033\001\067\001\068\001\255\255\070\001\
\255\255\072\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\255\255\255\255\255\255\099\001\100\001\255\255\102\001\
\070\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\115\001\255\255\255\255\255\255\
\086\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\099\001\100\001\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\072\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\255\255\099\001\100\001\255\255\102\001\
\255\255\032\001\033\001\059\001\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\115\001\069\001\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\077\001\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\072\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\111\001\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\099\001\100\001\255\255\102\001\
\255\255\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\115\001\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\033\001\255\255\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\255\255\099\001\100\001\255\255\102\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\115\001\255\255\099\001\100\001\
\255\255\102\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\099\001\100\001\255\255\
\102\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\032\001\033\001\255\255\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\255\255\099\001\100\001\255\255\102\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\115\001\255\255\099\001\100\001\
\255\255\102\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\001\001\255\255\255\255\067\001\068\001\006\001\
\070\001\255\255\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\099\001\100\001\001\001\
\102\001\255\255\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\115\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\047\001\048\001\255\255\255\255\076\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\095\001\096\001\097\001\098\001\255\255\255\255\076\001\077\001\
\255\255\255\255\255\255\106\001\255\255\108\001\109\001\110\001\
\255\255\112\001\113\001\114\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\097\001\
\098\001\111\001\255\255\255\255\255\255\255\255\255\255\255\255\
\106\001\255\255\108\001\109\001\110\001\255\255\112\001\113\001\
\114\001\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\106\001\255\255\108\001\
\255\255\255\255\111\001\006\001\007\001\114\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\095\001\096\001\070\001\098\001\
\099\001\100\001\255\255\255\255\255\255\255\255\078\001\106\001\
\255\255\108\001\255\255\255\255\255\255\255\255\255\255\114\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\096\001\255\255\098\001\069\001\070\001\060\001\061\001\255\255\
\063\001\064\001\106\001\255\255\108\001\255\255\069\001\255\255\
\071\001\255\255\114\001\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\255\255\095\001\096\001\255\255\
\098\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\106\001\255\255\108\001\255\255\255\255\255\255\006\001\255\255\
\114\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\006\001\255\255\070\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\095\001\
\096\001\255\255\098\001\072\001\255\255\255\255\255\255\255\255\
\255\255\255\255\106\001\255\255\108\001\255\255\255\255\255\255\
\255\255\255\255\114\001\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\095\001\096\001\255\255\098\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\106\001\255\255\108\001\
\255\255\069\001\255\255\071\001\078\001\114\001\074\001\075\001\
\076\001\077\001\078\001\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\255\255\
\098\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\106\001\255\255\108\001\255\255\255\255\255\255\006\001\255\255\
\114\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\060\001\000\001\001\001\063\001\064\001\004\001\255\255\
\006\001\007\001\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\095\001\
\096\001\255\255\098\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\106\001\255\255\108\001\255\255\255\255\053\001\
\054\001\055\001\114\001\255\255\058\001\059\001\095\001\096\001\
\062\001\098\001\255\255\255\255\255\255\255\255\255\255\255\255\
\070\001\106\001\255\255\108\001\000\001\001\001\255\255\255\255\
\004\001\114\001\006\001\007\001\255\255\255\255\255\255\255\255\
\086\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\099\001\100\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\053\001\054\001\055\001\069\001\255\255\058\001\059\001\
\047\001\048\001\062\001\076\001\077\001\255\255\255\255\255\255\
\255\255\255\255\070\001\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\071\001\255\255\086\001\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\255\255\255\255\111\001\099\001\
\100\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\255\255\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\111\001\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\111\001\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\111\001\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\255\255\111\001\076\001\077\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\255\255\
\255\255\076\001\077\001\255\255\255\255\111\001\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\255\255\111\001\076\001\077\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\077\001\255\255\255\255\
\111\001\255\255\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\255\255\
\255\255\069\001\255\255\255\255\255\255\255\255\255\255\111\001\
\076\001\077\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\255\255\255\255\
\069\001\255\255\255\255\255\255\255\255\255\255\255\255\076\001\
\077\001\255\255\255\255\111\001\255\255\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\255\255\255\255\069\001\255\255\255\255\255\255\
\255\255\255\255\111\001\076\001\077\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\047\001\048\001\049\001\050\001\
\051\001\052\001\076\001\077\001\255\255\255\255\111\001\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\255\255\
\255\255\076\001\077\001\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\255\255\255\255\111\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\255\255\
\255\255\069\001\047\001\048\001\049\001\050\001\051\001\052\001\
\076\001\077\001\255\255\255\255\111\001\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\047\001\048\001\049\001\050\001\051\001\052\001\076\001\
\077\001\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\111\001\255\255\255\255\255\255\069\001\
\047\001\048\001\049\001\050\001\051\001\052\001\076\001\077\001\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\111\001\255\255\255\255\255\255\069\001\047\001\
\048\001\049\001\050\001\051\001\052\001\076\001\077\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\111\001\255\255\255\255\255\255\069\001\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\077\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\111\001\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\111\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\255\255\070\001\071\001\255\255\073\001\
\255\255\075\001\255\255\077\001\255\255\079\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\255\255\070\001\255\255\255\255\073\001\255\255\255\255\
\076\001\077\001\255\255\079\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\047\001\
\048\001\049\001\050\001\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\255\255\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\079\001\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\079\001\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\047\001\048\001\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\071\001\047\001\048\001\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\060\001\
\255\255\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\255\255\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\079\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BUILTIN_VA_LIST\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  AT_NAME\000\
  "

let yynames_block = "\
  IDENT\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  INT32\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  TRY\000\
  EXCEPT\000\
  FINALLY\000\
  ATTRIBUTE\000\
  INLINE\000\
  ASM\000\
  TYPEOF\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  BUILTIN_VA_ARG\000\
  ATTRIBUTE_USED\000\
  DECLSPEC\000\
  MSASM\000\
  MSATTR\000\
  PRAGMA\000\
  PRAGMA_LINE\000\
  AT_TRANSFORM\000\
  AT_TRANSFORMEXPR\000\
  AT_SPECIFIER\000\
  AT_EXPR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 334 "src/frontc/cparser.mly"
              (_1)
# 2176 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 336 "src/frontc/cparser.mly"
                 (_1)
# 2183 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "src/frontc/cparser.mly"
                                        ( [] )
# 2189 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 340 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 2197 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 341 "src/frontc/cparser.mly"
                                        ( _2 )
# 2205 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 345 "src/frontc/cparser.mly"
                               ( currentLoc () )
# 2211 "src/frontc/cparser.ml"
               : Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 350 "src/frontc/cparser.mly"
                                        ( _1 )
# 2218 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 351 "src/frontc/cparser.mly"
                                        ( _1 )
# 2225 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 354 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, snd _2, [ _3 ]) )
# 2234 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 356 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, snd _2, _4)  )
# 2245 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 358 "src/frontc/cparser.mly"
                                        ( GLOBASM (fst _3, _1) )
# 2255 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 359 "src/frontc/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 2263 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 360 "src/frontc/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 2272 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 361 "src/frontc/cparser.mly"
                                        ( PRAGMA (VARIABLE (fst _1), 
                                                  snd _1) )
# 2280 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 367 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in 
                             (* Make the function declarator *)
                             doDeclaration (snd _1) []
                               [((fst _1, PROTO(JUSTBASE, pardecl,isva), [], cabslu),
                                 NO_INIT)]
                            )
# 2297 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 376 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             doDeclaration (snd _1) []
                               [((fst _1, PROTO(JUSTBASE,[],false), [], cabslu),
                                 NO_INIT)]
                            )
# 2310 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 382 "src/frontc/cparser.mly"
                                                                        (
    checkConnective(fst _5);
    TRANSFORMER(_3, _7, _1)
  )
# 2327 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 387 "src/frontc/cparser.mly"
                                                                                   (
    checkConnective(fst _5);
    EXPRTRANSFORMER(fst _3, fst _7, _1)
  )
# 2344 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 391 "src/frontc/cparser.mly"
                           ( PRAGMA (VARIABLE "parse_error", _1) )
# 2352 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 395 "src/frontc/cparser.mly"
             (fst _1)
# 2359 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 396 "src/frontc/cparser.mly"
                  (fst _1)
# 2366 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 397 "src/frontc/cparser.mly"
                                        ( "@name(" ^ fst _3 ^ ")" )
# 2374 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 401 "src/frontc/cparser.mly"
                                        ( () )
# 2380 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "src/frontc/cparser.mly"
                                        ( () )
# 2386 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 409 "src/frontc/cparser.mly"
          (VARIABLE (fst _1), snd _1)
# 2393 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 411 "src/frontc/cparser.mly"
          (CONSTANT (fst _1), snd _1)
# 2400 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 413 "src/frontc/cparser.mly"
          (smooth_expression (fst _1), snd _1)
# 2407 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 415 "src/frontc/cparser.mly"
          ( GNU_BODY (fst3 _2), _1 )
# 2415 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 419 "src/frontc/cparser.mly"
                         ( EXPR_PATTERN(fst _3), _1 )
# 2424 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 424 "src/frontc/cparser.mly"
                        ( _1 )
# 2431 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 426 "src/frontc/cparser.mly"
   (INDEX (fst _1, smooth_expression _2), snd _1)
# 2439 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 428 "src/frontc/cparser.mly"
   (CALL (fst _1, _3), snd _1)
# 2448 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 430 "src/frontc/cparser.mly"
                        ( let b, d = _5 in
                          CALL (VARIABLE "__builtin_va_arg", 
                                [fst _3; TYPE_SIZEOF (b, d)]), _1 )
# 2460 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 434 "src/frontc/cparser.mly"
          (MEMBEROF (fst _1, _3), snd _1)
# 2468 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 436 "src/frontc/cparser.mly"
          (MEMBEROFPTR (fst _1, _3), snd _1)
# 2476 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 438 "src/frontc/cparser.mly"
          (UNARY (POSINCR, fst _1), snd _1)
# 2484 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 440 "src/frontc/cparser.mly"
          (UNARY (POSDECR, fst _1), snd _1)
# 2492 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 443 "src/frontc/cparser.mly"
          ( CAST(_2, COMPOUND_INIT _5), _1 )
# 2503 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 448 "src/frontc/cparser.mly"
                        ( _1 )
# 2510 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 450 "src/frontc/cparser.mly"
          (UNARY (PREINCR, fst _2), _1)
# 2518 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 452 "src/frontc/cparser.mly"
          (UNARY (PREDECR, fst _2), _1)
# 2526 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 454 "src/frontc/cparser.mly"
          (EXPR_SIZEOF (fst _2), _1)
# 2534 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 456 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_SIZEOF (b, d), _1)
# 2543 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 458 "src/frontc/cparser.mly"
          (EXPR_ALIGNOF (fst _2), _1)
# 2551 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 460 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_ALIGNOF (b, d), _1)
# 2560 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 462 "src/frontc/cparser.mly"
          (UNARY (PLUS, fst _2), _1)
# 2568 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 464 "src/frontc/cparser.mly"
          (UNARY (MINUS, fst _2), _1)
# 2576 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 466 "src/frontc/cparser.mly"
          (UNARY (MEMOF, fst _2), _1)
# 2584 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 468 "src/frontc/cparser.mly"
          (UNARY (ADDROF, fst _2), _1)
# 2592 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 470 "src/frontc/cparser.mly"
          (UNARY (NOT, fst _2), _1)
# 2600 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 472 "src/frontc/cparser.mly"
          (UNARY (BNOT, fst _2), _1)
# 2608 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 473 "src/frontc/cparser.mly"
                               ( LABELADDR (fst _2), _1 )
# 2616 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 478 "src/frontc/cparser.mly"
                         ( _1 )
# 2623 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 480 "src/frontc/cparser.mly"
           ( CAST(_2, SINGLE_INIT (fst _4)), _1 )
# 2632 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 485 "src/frontc/cparser.mly"
                         ( _1 )
# 2639 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 487 "src/frontc/cparser.mly"
   (BINARY(MUL, fst _1, fst _3), snd _1)
# 2648 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 489 "src/frontc/cparser.mly"
   (BINARY(DIV, fst _1, fst _3), snd _1)
# 2656 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 491 "src/frontc/cparser.mly"
   (BINARY(MOD, fst _1, fst _3), snd _1)
# 2664 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 496 "src/frontc/cparser.mly"
                        ( _1 )
# 2671 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 498 "src/frontc/cparser.mly"
   (BINARY(ADD, fst _1, fst _3), snd _1)
# 2680 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 500 "src/frontc/cparser.mly"
   (BINARY(SUB, fst _1, fst _3), snd _1)
# 2689 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 505 "src/frontc/cparser.mly"
                         ( _1 )
# 2696 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 507 "src/frontc/cparser.mly"
   (BINARY(SHL, fst _1, fst _3), snd _1)
# 2704 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 509 "src/frontc/cparser.mly"
   (BINARY(SHR, fst _1, fst _3), snd _1)
# 2712 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 515 "src/frontc/cparser.mly"
                        ( _1 )
# 2719 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 517 "src/frontc/cparser.mly"
   (BINARY(LT, fst _1, fst _3), snd _1)
# 2727 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 519 "src/frontc/cparser.mly"
   (BINARY(GT, fst _1, fst _3), snd _1)
# 2735 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 521 "src/frontc/cparser.mly"
   (BINARY(LE, fst _1, fst _3), snd _1)
# 2743 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 523 "src/frontc/cparser.mly"
   (BINARY(GE, fst _1, fst _3), snd _1)
# 2751 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 528 "src/frontc/cparser.mly"
                        ( _1 )
# 2758 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 530 "src/frontc/cparser.mly"
   (BINARY(EQ, fst _1, fst _3), snd _1)
# 2766 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 532 "src/frontc/cparser.mly"
   (BINARY(NE, fst _1, fst _3), snd _1)
# 2774 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 538 "src/frontc/cparser.mly"
                       ( _1 )
# 2781 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 540 "src/frontc/cparser.mly"
   (BINARY(BAND, fst _1, fst _3), snd _1)
# 2790 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 545 "src/frontc/cparser.mly"
                       ( _1 )
# 2797 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 547 "src/frontc/cparser.mly"
   (BINARY(XOR, fst _1, fst _3), snd _1)
# 2805 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 552 "src/frontc/cparser.mly"
                        ( _1 )
# 2812 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 554 "src/frontc/cparser.mly"
   (BINARY(BOR, fst _1, fst _3), snd _1)
# 2820 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 559 "src/frontc/cparser.mly"
                        ( _1 )
# 2827 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 561 "src/frontc/cparser.mly"
   (BINARY(AND, fst _1, fst _3), snd _1)
# 2836 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 566 "src/frontc/cparser.mly"
                        ( _1 )
# 2843 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 568 "src/frontc/cparser.mly"
   (BINARY(OR, fst _1, fst _3), snd _1)
# 2851 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 573 "src/frontc/cparser.mly"
                         ( _1 )
# 2858 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 575 "src/frontc/cparser.mly"
   (QUESTION (fst _1, _3, fst _5), snd _1)
# 2867 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 583 "src/frontc/cparser.mly"
                         ( _1 )
# 2874 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 585 "src/frontc/cparser.mly"
   (BINARY(ASSIGN, fst _1, fst _3), snd _1)
# 2882 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 587 "src/frontc/cparser.mly"
   (BINARY(ADD_ASSIGN, fst _1, fst _3), snd _1)
# 2890 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 589 "src/frontc/cparser.mly"
   (BINARY(SUB_ASSIGN, fst _1, fst _3), snd _1)
# 2898 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 591 "src/frontc/cparser.mly"
   (BINARY(MUL_ASSIGN, fst _1, fst _3), snd _1)
# 2906 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 593 "src/frontc/cparser.mly"
   (BINARY(DIV_ASSIGN, fst _1, fst _3), snd _1)
# 2914 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 595 "src/frontc/cparser.mly"
   (BINARY(MOD_ASSIGN, fst _1, fst _3), snd _1)
# 2922 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 597 "src/frontc/cparser.mly"
   (BINARY(BAND_ASSIGN, fst _1, fst _3), snd _1)
# 2930 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 599 "src/frontc/cparser.mly"
   (BINARY(BOR_ASSIGN, fst _1, fst _3), snd _1)
# 2938 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 601 "src/frontc/cparser.mly"
   (BINARY(XOR_ASSIGN, fst _1, fst _3), snd _1)
# 2946 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 603 "src/frontc/cparser.mly"
   (BINARY(SHL_ASSIGN, fst _1, fst _3), snd _1)
# 2954 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 605 "src/frontc/cparser.mly"
   (BINARY(SHR_ASSIGN, fst _1, fst _3), snd _1)
# 2962 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 610 "src/frontc/cparser.mly"
                        ( _1 )
# 2969 "src/frontc/cparser.ml"
               : Cabs.expression * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 615 "src/frontc/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 2976 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 616 "src/frontc/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 2983 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 617 "src/frontc/cparser.mly"
                (CONST_CHAR (fst _1), snd _1)
# 2990 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 618 "src/frontc/cparser.mly"
                 (CONST_WCHAR (fst _1), snd _1)
# 2997 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 619 "src/frontc/cparser.mly"
                             (CONST_STRING (fst _1), snd _1)
# 3004 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 620 "src/frontc/cparser.mly"
                   (CONST_WSTRING (fst _1), snd _1)
# 3011 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 626 "src/frontc/cparser.mly"
                                        (intlist_to_string (fst _1), snd _1 )
# 3018 "src/frontc/cparser.ml"
               : string * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 630 "src/frontc/cparser.mly"
                                        (intlist_to_string (fst _1) )
# 3025 "src/frontc/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 633 "src/frontc/cparser.mly"
                                        ( _1 )
# 3032 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 634 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3040 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 638 "src/frontc/cparser.mly"
                                        ( _1 )
# 3047 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 639 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3055 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 640 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3063 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 645 "src/frontc/cparser.mly"
                  (_1)
# 3070 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 646 "src/frontc/cparser.mly"
                                        ((Cabs.explodeStringToInts 
					    !currentFunctionName), _1)
# 3078 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 648 "src/frontc/cparser.mly"
                                        ((Cabs.explodeStringToInts 
					    !currentFunctionName), _1)
# 3086 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 653 "src/frontc/cparser.mly"
                        ( SINGLE_INIT (fst _1) )
# 3093 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 655 "src/frontc/cparser.mly"
   ( COMPOUND_INIT _2)
# 3102 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 658 "src/frontc/cparser.mly"
                                            ( [_1] )
# 3109 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 659 "src/frontc/cparser.mly"
                                            ( _1 :: _3 )
# 3117 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 662 "src/frontc/cparser.mly"
                                            ( [] )
# 3123 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 663 "src/frontc/cparser.mly"
                                            ( _1 )
# 3130 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 666 "src/frontc/cparser.mly"
                                            ( (_1, _3) )
# 3139 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 667 "src/frontc/cparser.mly"
                                         ( (_1, _2) )
# 3147 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 668 "src/frontc/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 3154 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 671 "src/frontc/cparser.mly"
                             ( () )
# 3160 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 673 "src/frontc/cparser.mly"
                                 ( () )
# 3166 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 676 "src/frontc/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 3174 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 678 "src/frontc/cparser.mly"
                                        ( ATINDEX_INIT(fst _2, _4) )
# 3182 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 680 "src/frontc/cparser.mly"
                                        ( ATINDEXRANGE_INIT(fst _2, fst _4) )
# 3190 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 683 "src/frontc/cparser.mly"
                                        ( NEXT_INIT )
# 3196 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 684 "src/frontc/cparser.mly"
                                        ( _1 )
# 3203 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    Obj.repr(
# 688 "src/frontc/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 3210 "src/frontc/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 692 "src/frontc/cparser.mly"
                                    ( [] )
# 3216 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 693 "src/frontc/cparser.mly"
                                    ( fst _1 )
# 3223 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 698 "src/frontc/cparser.mly"
          (NOTHING)
# 3229 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 700 "src/frontc/cparser.mly"
          (smooth_expression (fst _1))
# 3236 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 704 "src/frontc/cparser.mly"
                                           ([fst _1], snd _1)
# 3243 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 705 "src/frontc/cparser.mly"
                                                  ( fst _1 :: fst _3, snd _1 )
# 3251 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 706 "src/frontc/cparser.mly"
                                                  ( _3 )
# 3258 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 710 "src/frontc/cparser.mly"
                                    ( NOTHING )
# 3264 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 711 "src/frontc/cparser.mly"
                                    ( smooth_expression (fst _1) )
# 3271 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 715 "src/frontc/cparser.mly"
                                                   ( _2 )
# 3279 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 716 "src/frontc/cparser.mly"
                                                   ( [], _1 )
# 3286 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 720 "src/frontc/cparser.mly"
                                                       ( fst _2 )
# 3293 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 721 "src/frontc/cparser.mly"
                                                       ( [] )
# 3299 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 728 "src/frontc/cparser.mly"
                                         (!Lexerhack.pop_context();
                                          { blabels = _2;
                                            battrs = _3;
                                            bstmts = _4 },
					    _1, _5
                                         )
# 3315 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 734 "src/frontc/cparser.mly"
                                         ( { blabels = [];
                                             battrs  = [];
                                             bstmts  = [] },
					     _2, _3
                                         )
# 3327 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 741 "src/frontc/cparser.mly"
                           (!Lexerhack.push_context (); _1)
# 3334 "src/frontc/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 745 "src/frontc/cparser.mly"
                                                            ( [] )
# 3340 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 747 "src/frontc/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 3347 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 752 "src/frontc/cparser.mly"
                                         ( [] )
# 3353 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 753 "src/frontc/cparser.mly"
                                         ( DEFINITION(_1) :: _2 )
# 3361 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 754 "src/frontc/cparser.mly"
                                         ( _1 :: _2 )
# 3369 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 756 "src/frontc/cparser.mly"
                                         ( [ LABEL (fst _1, NOP (snd _1), 
                                                    snd _1)] )
# 3377 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 761 "src/frontc/cparser.mly"
                                                     ( [] )
# 3383 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 762 "src/frontc/cparser.mly"
                                                     ( _2 @ _4 )
# 3392 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 765 "src/frontc/cparser.mly"
                                         ( [ fst _1 ] )
# 3399 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 766 "src/frontc/cparser.mly"
                                         ( fst _1 :: _3 )
# 3407 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 772 "src/frontc/cparser.mly"
               (NOP _1 )
# 3414 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 774 "src/frontc/cparser.mly"
          (COMPUTATION (smooth_expression (fst _1), snd _1))
# 3422 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 775 "src/frontc/cparser.mly"
                        (BLOCK (fst3 _1, snd3 _1))
# 3429 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 777 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, NOP _1, _1))
# 3438 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 779 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, _5, _1))
# 3448 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 781 "src/frontc/cparser.mly"
                        (SWITCH (smooth_expression (fst _2), _3, _1))
# 3457 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 783 "src/frontc/cparser.mly"
          (WHILE (smooth_expression (fst _2), _3, _1))
# 3466 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 785 "src/frontc/cparser.mly"
                   (DOWHILE (smooth_expression (fst _4), _2, _1))
# 3477 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'for_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 788 "src/frontc/cparser.mly"
                          (FOR (_3, _4, _6, _8, _1))
# 3490 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 790 "src/frontc/cparser.mly"
                   (LABEL (fst _1, _3, snd _1))
# 3498 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 792 "src/frontc/cparser.mly"
                          (CASE (fst _2, NOP _1, _1))
# 3506 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 794 "src/frontc/cparser.mly"
                          (CASERANGE (fst _2, fst _4, NOP _1, _1))
# 3515 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 796 "src/frontc/cparser.mly"
                          (DEFAULT (NOP _1, _1))
# 3522 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 797 "src/frontc/cparser.mly"
                       (RETURN (NOTHING, _1))
# 3530 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 799 "src/frontc/cparser.mly"
                          (RETURN (smooth_expression (fst _2), _1))
# 3539 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 800 "src/frontc/cparser.mly"
                        (BREAK _1)
# 3547 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 801 "src/frontc/cparser.mly"
                        (CONTINUE _1)
# 3555 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 803 "src/frontc/cparser.mly"
                   (GOTO (fst _2, _1))
# 3564 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 805 "src/frontc/cparser.mly"
                                 ( COMPGOTO (smooth_expression (fst _3), _1) )
# 3574 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 807 "src/frontc/cparser.mly"
                        ( let (outs,ins,clobs) = _5 in
                          ASM (_2, _4, outs, ins, clobs, _1) )
# 3587 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 809 "src/frontc/cparser.mly"
                        ( ASM ([], [fst _1], [], [], [], snd _1))
# 3594 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 811 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _5 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/except in GCC code";
                          TRY_EXCEPT (b, COMMA (fst _4), h, _1) )
# 3609 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 817 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _4 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/finally in GCC code";
                          TRY_FINALLY (b, h, _1) )
# 3623 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 823 "src/frontc/cparser.mly"
                                 ( (NOP _2))
# 3631 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 828 "src/frontc/cparser.mly"
                                 ( FC_EXP _1 )
# 3639 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 829 "src/frontc/cparser.mly"
                                 ( FC_DECL _1 )
# 3646 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 834 "src/frontc/cparser.mly"
                                       ( doDeclaration (snd _1) (fst _1) _2 )
# 3655 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 835 "src/frontc/cparser.mly"
                                    ( doDeclaration (snd _1) (fst _1) [] )
# 3663 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 838 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 3670 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name list) in
    Obj.repr(
# 839 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 3678 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 843 "src/frontc/cparser.mly"
                                        ( (_1, NO_INIT) )
# 3685 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 845 "src/frontc/cparser.mly"
                                        ( (_1, _3) )
# 3693 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 850 "src/frontc/cparser.mly"
                                        ( SpecTypedef :: _2, _1  )
# 3701 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 851 "src/frontc/cparser.mly"
                                        ( SpecStorage EXTERN :: _2, _1 )
# 3709 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 852 "src/frontc/cparser.mly"
                                        ( SpecStorage STATIC :: _2, _1 )
# 3717 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 853 "src/frontc/cparser.mly"
                                        ( SpecStorage AUTO :: _2, _1 )
# 3725 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 854 "src/frontc/cparser.mly"
                                        ( SpecStorage REGISTER :: _2, _1)
# 3733 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 856 "src/frontc/cparser.mly"
                                          ( SpecType (fst _1) :: _2, snd _1 )
# 3741 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 858 "src/frontc/cparser.mly"
                                        ( SpecInline :: _2, _1 )
# 3749 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 859 "src/frontc/cparser.mly"
                                        ( (fst _1) :: _2, snd _1 )
# 3757 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 860 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: _2, snd _1 )
# 3765 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 862 "src/frontc/cparser.mly"
                                        ( [ SpecPattern(fst _3) ], _1 )
# 3774 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 867 "src/frontc/cparser.mly"
                                        ( [] )
# 3780 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 868 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 3787 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 875 "src/frontc/cparser.mly"
                                        ( [] )
# 3793 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 876 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 3800 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 879 "src/frontc/cparser.mly"
                    ( Tvoid, _1)
# 3807 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 880 "src/frontc/cparser.mly"
                    ( Tchar, _1 )
# 3814 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 881 "src/frontc/cparser.mly"
                    ( Tshort, _1 )
# 3821 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 882 "src/frontc/cparser.mly"
                    ( Tint, _1 )
# 3828 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 883 "src/frontc/cparser.mly"
                    ( Tlong, _1 )
# 3835 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 884 "src/frontc/cparser.mly"
                    ( Tint64, _1 )
# 3842 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 885 "src/frontc/cparser.mly"
                    ( Tfloat, _1 )
# 3849 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 886 "src/frontc/cparser.mly"
                    ( Tdouble, _1 )
# 3856 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 887 "src/frontc/cparser.mly"
                    ( Tsigned, _1 )
# 3863 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 888 "src/frontc/cparser.mly"
                    ( Tunsigned, _1 )
# 3870 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 890 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, None,    []), _1 )
# 3878 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 892 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, Some _4, []), _1 )
# 3889 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 894 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _3, []), _1 )
# 3899 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 896 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, Some _5, _2), _1 )
# 3911 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 898 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _4, _2), _1 )
# 3922 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 900 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, None,    []), _1 )
# 3930 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 902 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, Some _4, []), _1 )
# 3941 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 904 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _3, []), _1 )
# 3951 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 906 "src/frontc/cparser.mly"
                                                   ( Tunion  (_3, Some _5, _2), _1 )
# 3963 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 908 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _4, _2), _1 )
# 3974 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 910 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 3982 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 912 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 3994 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 914 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 4005 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 916 "src/frontc/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 4018 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 918 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 4030 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 919 "src/frontc/cparser.mly"
                    ( Tnamed (fst _1), snd _1 )
# 4037 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 920 "src/frontc/cparser.mly"
                                        ( TtypeofE (fst _3), _1 )
# 4046 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 921 "src/frontc/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 4056 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 927 "src/frontc/cparser.mly"
                                         ( [] )
# 4062 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 929 "src/frontc/cparser.mly"
                                         ( (fst _1, 
                                            [(missingFieldDecl, None)]) :: _3 )
# 4072 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 933 "src/frontc/cparser.mly"
                                         ( _2 )
# 4080 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 935 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) 
                                            :: _4 )
# 4091 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 938 "src/frontc/cparser.mly"
                                          ( _3 )
# 4099 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 941 "src/frontc/cparser.mly"
                                         ( [_1] )
# 4106 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 942 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 4114 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 945 "src/frontc/cparser.mly"
                                    ( (_1, None) )
# 4121 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 946 "src/frontc/cparser.mly"
                                    ( (_1, Some (fst _3)) )
# 4129 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 947 "src/frontc/cparser.mly"
                                    ( (missingFieldDecl, Some (fst _2)) )
# 4136 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 951 "src/frontc/cparser.mly"
                  ([_1])
# 4143 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 952 "src/frontc/cparser.mly"
                                       (_1 @ [_3])
# 4151 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    Obj.repr(
# 953 "src/frontc/cparser.mly"
                                        ( _1 )
# 4158 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 956 "src/frontc/cparser.mly"
            ((fst _1, NOTHING, snd _1))
# 4165 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 957 "src/frontc/cparser.mly"
                         ((fst _1, fst _3, snd _1))
# 4173 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 963 "src/frontc/cparser.mly"
                                         ( let (n, decl) = _2 in
                                           (n, applyPointer (fst _1) decl, _3, snd _1) )
# 4183 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 971 "src/frontc/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 4190 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    Obj.repr(
# 974 "src/frontc/cparser.mly"
                                   ( let (n,decl,al,loc) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 4200 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 978 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, _4)) )
# 4210 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    Obj.repr(
# 981 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, NOTHING)) )
# 4219 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 984 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva))
                                   )
# 4232 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 991 "src/frontc/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 4239 "src/frontc/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    Obj.repr(
# 994 "src/frontc/cparser.mly"
                                   ( ([], false) )
# 4245 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 995 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _2 in 
                                     (_1 :: params, isva) 
                                   )
# 4255 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1000 "src/frontc/cparser.mly"
                                        ( ([], false) )
# 4261 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1001 "src/frontc/cparser.mly"
                                        ( ([], true) )
# 4267 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1002 "src/frontc/cparser.mly"
                                        ( let (params, isva) = _3 in 
                                          (_2 :: params, isva)
                                        )
# 4277 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1009 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) )
# 4285 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1010 "src/frontc/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, cabslu)) )
# 4294 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1012 "src/frontc/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], cabslu)) )
# 4301 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    Obj.repr(
# 1013 "src/frontc/cparser.mly"
                                          ( _2 )
# 4309 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1018 "src/frontc/cparser.mly"
                                      ( let (n, decl, a) = _2 in
					  (n, applyPointer (fst _1) decl, a, snd _1) )
# 4318 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1023 "src/frontc/cparser.mly"
                                   ( let par_decl, isva = doOldParDecl _3 _5 in
                                     let n, decl = _1 in
                                     (n, PROTO(decl, par_decl, isva), [])
                                   )
# 4331 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1028 "src/frontc/cparser.mly"
                                   ( let n, decl = _1 in
                                     (n, PROTO(decl, [], false), [])
                                   )
# 4341 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1034 "src/frontc/cparser.mly"
                                               ( [fst _1] )
# 4348 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1035 "src/frontc/cparser.mly"
                                               ( let rest = _3 in
                                                 (fst _1 :: rest) )
# 4357 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1040 "src/frontc/cparser.mly"
                                          ( ([], false) )
# 4363 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1042 "src/frontc/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 4372 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1044 "src/frontc/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva) 
                                          )
# 4384 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1050 "src/frontc/cparser.mly"
                                          ( [_1] )
# 4391 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1051 "src/frontc/cparser.mly"
                                          ( _1 :: _3 )
# 4399 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    Obj.repr(
# 1052 "src/frontc/cparser.mly"
                                          ( [] )
# 4405 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1057 "src/frontc/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 4414 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1060 "src/frontc/cparser.mly"
                                 ( [], currentLoc () )
# 4420 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1061 "src/frontc/cparser.mly"
                                 ( _1 )
# 4427 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1065 "src/frontc/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then begin
                                   parse_error "attributes in type name";
                                   raise Parsing.Parse_error
                                 end;
                                 (fst _1, d) 
                               )
# 4441 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1072 "src/frontc/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 4448 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1075 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 4457 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1076 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 4464 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1083 "src/frontc/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 4475 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1088 "src/frontc/cparser.mly"
                                   ( JUSTBASE )
# 4482 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1091 "src/frontc/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 4490 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1094 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva)
                                   )
# 4502 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1100 "src/frontc/cparser.mly"
                                    ( _1 )
# 4509 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1101 "src/frontc/cparser.mly"
                                    ( JUSTBASE )
# 4515 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1105 "src/frontc/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by 
                                    * announceFunctionName *)
            doFunctionDef loc (trd3 _2) specs decl (fst3 _2)
          )
# 4528 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1115 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 4538 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1121 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 4548 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1126 "src/frontc/cparser.mly"
                           ( let (params, isva) = _3 in
                             let fdec = 
                               (fst _1, PROTO(JUSTBASE, params, isva), [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                           )
# 4564 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1137 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, pardecl,isva), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec) 
                            )
# 4584 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1150 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, [], false), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 4600 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1163 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_CONST), _1 )
# 4607 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1164 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_VOLATILE), _1 )
# 4614 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1165 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_RESTRICT), _1 )
# 4621 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1170 "src/frontc/cparser.mly"
                   ( [])
# 4627 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1171 "src/frontc/cparser.mly"
                                 ( fst _1 :: _2 )
# 4635 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1177 "src/frontc/cparser.mly"
                                        ( [] )
# 4641 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1178 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 4649 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1180 "src/frontc/cparser.mly"
                                        ( ("__asm__", 
					   [CONSTANT(CONST_STRING (fst _3))]) :: _5 )
# 4660 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list_ne) in
    Obj.repr(
# 1187 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 4669 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1192 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 4677 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1193 "src/frontc/cparser.mly"
                                        ( (fst _1, []), snd _1 )
# 4684 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1195 "src/frontc/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 4691 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1200 "src/frontc/cparser.mly"
                                        ( _1 )
# 4698 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1201 "src/frontc/cparser.mly"
                                        ( ("const", []), _1 )
# 4705 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1202 "src/frontc/cparser.mly"
                                        ( ("restrict",[]), _1 )
# 4712 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1203 "src/frontc/cparser.mly"
                                        ( ("volatile",[]), _1 )
# 4719 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list_ne) in
    Obj.repr(
# 1211 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3) )
# 4728 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1212 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2) )
# 4736 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1218 "src/frontc/cparser.mly"
                                        ( [_1] )
# 4743 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1219 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 4751 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1226 "src/frontc/cparser.mly"
             ( VARIABLE (fst _1) )
# 4758 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1228 "src/frontc/cparser.mly"
                  ( VARIABLE (fst _1) )
# 4765 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1229 "src/frontc/cparser.mly"
                                        ( _2 )
# 4773 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1230 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE (fst _2)]) )
# 4781 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1231 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_INT (fst _1)) )
# 4788 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1232 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_STRING (fst _1)) )
# 4795 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1236 "src/frontc/cparser.mly"
                                         ( VARIABLE "aconst" )
# 4802 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1237 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 4810 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1239 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 4818 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1240 "src/frontc/cparser.mly"
                                         ( VARIABLE ("default:" ^ fst _3) )
# 4826 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1245 "src/frontc/cparser.mly"
                                         ( VARIABLE ("__noreturn__") )
# 4833 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1249 "src/frontc/cparser.mly"
                                         ( _1 )
# 4840 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1252 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE ""]) )
# 4848 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1253 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), _2) )
# 4856 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1255 "src/frontc/cparser.mly"
                                         (MEMBEROFPTR (_1, _3))
# 4864 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1256 "src/frontc/cparser.mly"
                                         (MEMBEROF (_1, _3))
# 4872 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1263 "src/frontc/cparser.mly"
                                         ( _1 )
# 4879 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1264 "src/frontc/cparser.mly"
                                         (EXPR_SIZEOF (fst _2) )
# 4887 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1266 "src/frontc/cparser.mly"
                           (let b, d = _3 in TYPE_SIZEOF (b, d))
# 4896 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1268 "src/frontc/cparser.mly"
                                         (EXPR_ALIGNOF (fst _2) )
# 4904 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1269 "src/frontc/cparser.mly"
                                         (let b, d = _3 in TYPE_ALIGNOF (b, d))
# 4913 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1270 "src/frontc/cparser.mly"
                                        (UNARY (PLUS, _2))
# 4921 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1271 "src/frontc/cparser.mly"
                                        (UNARY (MINUS, _2))
# 4929 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1272 "src/frontc/cparser.mly"
                            (UNARY (MEMOF, _2))
# 4937 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1274 "src/frontc/cparser.mly"
                                 (UNARY (ADDROF, _2))
# 4945 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1275 "src/frontc/cparser.mly"
                                 (UNARY (NOT, _2))
# 4953 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1276 "src/frontc/cparser.mly"
                                        (UNARY (BNOT, _2))
# 4961 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1280 "src/frontc/cparser.mly"
                                         ( _1 )
# 4968 "src/frontc/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1284 "src/frontc/cparser.mly"
                                        ( _1 )
# 4975 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1285 "src/frontc/cparser.mly"
                                        (BINARY(MUL ,_1 , _3))
# 4984 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1286 "src/frontc/cparser.mly"
                                          (BINARY(DIV ,_1 , _3))
# 4992 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1287 "src/frontc/cparser.mly"
                                          (BINARY(MOD ,_1 , _3))
# 5000 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1292 "src/frontc/cparser.mly"
                                        ( _1 )
# 5007 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1293 "src/frontc/cparser.mly"
                                            (BINARY(ADD ,_1 , _3))
# 5016 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1294 "src/frontc/cparser.mly"
                                            (BINARY(SUB ,_1 , _3))
# 5025 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1298 "src/frontc/cparser.mly"
                                        ( _1 )
# 5032 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1299 "src/frontc/cparser.mly"
                                     (BINARY(SHL ,_1 , _3))
# 5040 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1300 "src/frontc/cparser.mly"
                                     (BINARY(SHR ,_1 , _3))
# 5048 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1304 "src/frontc/cparser.mly"
                                        ( _1 )
# 5055 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1305 "src/frontc/cparser.mly"
                                   (BINARY(LT ,_1 , _3))
# 5063 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1306 "src/frontc/cparser.mly"
                                   (BINARY(GT ,_1 , _3))
# 5071 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1307 "src/frontc/cparser.mly"
                                      (BINARY(LE ,_1 , _3))
# 5079 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1308 "src/frontc/cparser.mly"
                                      (BINARY(GE ,_1 , _3))
# 5087 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1312 "src/frontc/cparser.mly"
                                        ( _1 )
# 5094 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1313 "src/frontc/cparser.mly"
                                            (BINARY(EQ ,_1 , _3))
# 5102 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1314 "src/frontc/cparser.mly"
                                            (BINARY(NE ,_1 , _3))
# 5110 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1319 "src/frontc/cparser.mly"
                                        ( _1 )
# 5117 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1320 "src/frontc/cparser.mly"
                                       (BINARY(BAND ,_1 , _3))
# 5126 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1324 "src/frontc/cparser.mly"
                                           ( _1 )
# 5133 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1325 "src/frontc/cparser.mly"
                                           (BINARY(XOR ,_1 , _3))
# 5141 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1329 "src/frontc/cparser.mly"
                                          ( _1 )
# 5148 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1330 "src/frontc/cparser.mly"
                                          (BINARY(BOR ,_1 , _3))
# 5156 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1334 "src/frontc/cparser.mly"
                                                ( _1 )
# 5163 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1335 "src/frontc/cparser.mly"
                                             (BINARY(AND ,_1 , _3))
# 5172 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1339 "src/frontc/cparser.mly"
                                               ( _1 )
# 5179 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1340 "src/frontc/cparser.mly"
                                               (BINARY(OR ,_1 , _3))
# 5187 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1344 "src/frontc/cparser.mly"
                                         ( _1 )
# 5194 "src/frontc/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1348 "src/frontc/cparser.mly"
                                         ( [_1] )
# 5201 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1349 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 5209 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1350 "src/frontc/cparser.mly"
                                         ( _3 )
# 5216 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    Obj.repr(
# 1353 "src/frontc/cparser.mly"
                                         ( _2 )
# 5224 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1354 "src/frontc/cparser.mly"
                                         ( [] )
# 5231 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1358 "src/frontc/cparser.mly"
                                        ( [] )
# 5237 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1359 "src/frontc/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 5245 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1360 "src/frontc/cparser.mly"
                                        ( ("const", []) :: _2 )
# 5253 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1363 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 5260 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1364 "src/frontc/cparser.mly"
                                                 ( _1 :: _2 )
# 5268 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1367 "src/frontc/cparser.mly"
                        ( ([], [], []) )
# 5274 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1369 "src/frontc/cparser.mly"
                        ( let (ins, clobs) = _3 in
                          (_2, ins, clobs) )
# 5283 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1373 "src/frontc/cparser.mly"
                                        ( [] )
# 5289 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1374 "src/frontc/cparser.mly"
                                        ( List.rev _1 )
# 5296 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1377 "src/frontc/cparser.mly"
                                        ( [_1] )
# 5303 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1378 "src/frontc/cparser.mly"
                                        ( _3 :: _1 )
# 5311 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1381 "src/frontc/cparser.mly"
                                                 ( (fst _1, fst _3) )
# 5320 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1382 "src/frontc/cparser.mly"
                                                 ( (fst _1, NOTHING ) )
# 5328 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1385 "src/frontc/cparser.mly"
                             ( ([], []) )
# 5334 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1387 "src/frontc/cparser.mly"
                        ( (_2, _3) )
# 5342 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1390 "src/frontc/cparser.mly"
                                        ( [] )
# 5348 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1391 "src/frontc/cparser.mly"
                                        ( _2 )
# 5355 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1394 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 5362 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1395 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 5370 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1399 "src/frontc/cparser.mly"



# 5403 "src/frontc/cparser.ml"
